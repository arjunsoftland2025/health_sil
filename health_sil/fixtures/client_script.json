[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lab Test",
  "enabled": 1,
  "modified": "2025-05-29 15:00:12.797698",
  "module": "Health Sil",
  "name": "Lab test onload",
  "script": "// frappe.ui.form.on('Lab Test', {\n//     onload: function(frm) {\n//         const params = frappe.utils.get_query_params();\n//         // if (params.patient) frm.set_value('patient', params.patient);\n//         // if (params.referring_physician) frm.set_value('referring_physician', params.referring_physician);\n//         // if (params.lab_test_name) frm.set_value('lab_test_name', params.lab_test_name);\n//     }\n// });\n\n// frappe.ui.form.on('Lab Test', {\n//     onload: function(frm) {\n//         let d = frm.doc.practitioner_name;\n//         console.log(d);\n//     }\n// });\n\nfrappe.ui.form.on('Lab Test', {\n    onload: function(frm) {\n        const params = frappe.utils.get_query_params();\n        if (params.patient) frm.set_value('patient', params.patient);\n        if (params.practitioner) frm.set_value('practitioner_name', params.practitioner);\n        if (params.lab_test_name) frm.set_value('template', params.lab_test_name);\n        if (params.laboratory_bill_ref) frm.set_value('laboratory_bill_ref', params.laboratory_bill_ref);\n        if (params.source_item_code) frm.set_value('source_item_code', params.source_item_code);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-05-05 11:04:57.875528",
  "module": "Health Sil",
  "name": "Purchase Invoice rate",
  "script": "frappe.ui.form.on('Purchase Invoice Item', {\n    item_code(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.item_code) {\n            frappe.db.get_value('Item', row.item_code, 'valuation_rate')\n                .then(r => {\n                    if (r && r.message && r.message.valuation_rate != null) {\n                        frappe.model.set_value(cdt, cdn, 'custom_valuation_rate', r.message.valuation_rate);\n                    }\n                });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-05-09 16:40:13.311570",
  "module": "Health Sil",
  "name": "Add free in Purchase Inv",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    on_submit: function(frm) {\n        // Ensure the document is submitted\n        if (frm.doc.docstatus === 1) {\n            // Freeze the screen with a message\n            frappe.dom.freeze(__(\"Creating Stock Entries...\"));\n\n            // Call the server-side method to create stock entries\n            frappe.call({\n                method: 'health_sil.services.purchase_invoice.create_stock_entry_from_purchase_invoice',\n                args: {\n                    purchase_invoice: frm.doc.name\n                },\n                callback: function(response) {\n                    // Unfreeze the screen\n                    frappe.dom.unfreeze();\n\n                    if (response.message) {\n                        frappe.msgprint({\n                            title: __('Success'),\n                            message: __('Stock Entries Created Successfully'),\n                            indicator: 'green'\n                        });\n                    }\n                },\n                error: function(err) {\n                    // Unfreeze the screen on error\n                    frappe.dom.unfreeze();\n                    frappe.msgprint({\n                        title: __('Error'),\n                        message: __('An error occurred while creating Stock Entries: {0}', [err.message]),\n                        indicator: 'red'\n                    });\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 0,
  "modified": "2025-04-08 16:34:40.145000",
  "module": "Health Sil",
  "name": "Patient Fields Validations",
  "script": "frappe.ui.form.on('Patient', {\n    mobile: function(frm) {\n        if (!frm.doc.mobile) return;\n\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Patient',\n                filters: { 'mobile': frm.doc.mobile },\n                fields: ['name', 'patient_name', 'mobile', 'uid']\n            },\n            callback: function(response) {\n                if (response.message.length > 0) {\n                    let table_html = `\n                        <div class=\"panel panel-default\" style=\"max-width: 800px; margin: auto;\">\n                          <div class=\"panel-body\">\n                            <div class=\"table-responsive\">\n                              <table class=\"table table-bordered table-striped table-hover\">\n                                  <thead style=\"background-color:#f8f9fa;\">\n                                      <tr>\n                                          <th>UID</th>\n                                          <th>Patient Name</th>\n                                          <th>Mobile</th>\n                                      </tr>\n                                  </thead>\n                                  <tbody>\n                    `;\n\n                    // Sort by UID in ascending order for improved readability\n                    response.message.sort((a, b) => a.uid - b.uid).forEach(patient => {\n                        table_html += `\n                              <tr>\n                                  <td>${patient.uid}</td>\n                                  <td><a href=\"/app/patient/${patient.name}\" style=\"color:#007bff; text-decoration:underline;\">${patient.patient_name}</a></td>\n                                  <td>${patient.mobile}</td>\n                              </tr>\n                        `;\n                    });\n\n                    table_html += `\n                                  </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                    `;\n\n                    // Display the panel in a message print\n                    frappe.msgprint({\n                        title: __('Duplicate Patients List'),\n                        message: table_html,\n                        indicator: 'red'\n                    });\n                }\n            }\n        });\n    },\n        refresh: function(frm) {\n        // if (frm.doc.custom_free_consultation_period) {\n        //     calculate_valid_till(frm);\n        // }\n        let consultation_valid_date = frm.doc.custom_consultation_valid_date;\n        console.log(consultation_valid_date);\n        let validTillDate = new Date(consultation_valid_date);\n        if (consultation_valid_date){\n            // Format the valid till date for display\n            let formattedDate = validTillDate.toLocaleDateString('en-US', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n            });\n            \n            // Set the hidden field value in \"YYYY-MM-DD\" format\n            let formattedHiddenDate = validTillDate.toISOString().split('T')[0];\n            frm.set_value('custom_consultation_valid_date', formattedHiddenDate);\n            frm.refresh_field('custom_consultation_valid_date');\n            \n            // Compare the valid till date with the form open date (current date)\n            let currentDate = new Date();\n            if (validTillDate < currentDate) {\n                // If expired, display the message in red\n                frm.fields_dict.custom_valid_till.$wrapper.html(\n                    `<span style=\"color:red;\">Consultation Expired on: ${formattedDate}</span>`\n                );\n                // Show an alert on the bottom right that the consultation has expired\n                frappe.show_alert({\n                    message: `Consultation expired on: ${formattedDate}`,\n                    indicator: 'red'\n                }, 5);\n            } else {\n                // Otherwise, display normally\n                frm.fields_dict.custom_valid_till.$wrapper.html(\n                    `Consultation Valid Till: ${formattedDate}`\n                );\n            }\n            frm.refresh_field('custom_valid_till');\n        } else {\n            // Clear fields if no consultation period is provided\n            frm.set_value('custom_consultation_valid_date', null);\n            frm.refresh_field('custom_consultation_valid_date');\n            frm.fields_dict.custom_valid_till.$wrapper.html(\"\");\n            frm.refresh_field('custom_valid_till');\n        }\n    }\n});\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2025-05-14 12:56:30.367187",
  "module": "Health Sil",
  "name": "Registration Invoice Button",
  "script": "frappe.ui.form.on('Patient', {\n    // Form lifecycle events\n    on_load: function(frm) {\n        // Clear the cache and refresh\n        frappe.clear_cache();\n        frm.refresh();\n        console.log(\"Cache cleared and form refreshed on load\");\n    },\n    \n    refresh: function(frm) {\n        console.log(\"Patient form refresh function executing\");\n        frm.dialog_shown_in_current_session = false;\n        console.log(\"refreshing.....\");\n        \n        // Hide specific buttons\n        $('button:contains(\"Invoice Patient Registration\")').each(function() {\n            if ($(this).text().trim() === \"Invoice Patient Registration\") {\n                $(this).hide();\n            }\n        });\n        \n        $('button:contains(\"ABDM\")').each(function() {\n            if ($(this).text().trim() === \"ABDM\") {\n                $(this).hide();\n            }\n        });\n        \n        // Add the Generate Invoice button - this part is separate from the above logic\n        if (!frm.is_new()) {\n            console.log(\"Adding Generate Invoice button\");\n            // Add the button once (it's re-added on each refresh by Frappe anyway)\n            frm.add_custom_button('Generate Invoice', function() {\n                frm.refresh();\n                console.log(\"Cache cleared custom button\");\n                generateInvoiceHandler(frm);\n            });\n            \n            // Only auto-open the dialog for non-registered patients on form load\n            // and only if a dialog isn't already showing\n            if (!frm.doc.custom_is_registered && !frm.dialog_shown_in_current_session) {\n                // Set this flag to prevent multiple dialogs in one session\n                frm.dialog_shown_in_current_session = true;\n                \n                // Use a slight delay to ensure the UI is fully loaded\n                setTimeout(() => {\n                    // Check again to make sure no other process has shown the dialog\n                    if (!window.current_patient_dialog_active) {\n                        generateInvoiceHandler(frm);\n                    }\n                }, 300);\n            }\n        }\n    },\n    \n    after_save: function(frm) {\n        // Show invoice dialog only once after initial save\n        // This ensures it's shown only after the first save of a new patient\n        if (frm.doc.__islocal) {\n            // We use setTimeout to ensure this runs after the save is complete\n            // and the __islocal flag is updated\n            setTimeout(() => {\n                if (!frm.doc.custom_is_registered) {\n                    frappe.clear_cache();\n                    console.log(\"Cache cleared after save\");\n                    generateInvoiceHandler(frm);\n                }\n            }, 200);\n        }\n    },\n    \n    // Field change events\n    territory: function(frm) {\n        if (frm.doc.territory == \"Foreign\") {\n            frm.set_value('default_price_list', \"Foreign Price List\");\n        } else {\n            frm.set_value('default_price_list', \"Native Price List\");\n        }\n    },\n    \n    mobile: function(frm) {\n        if (!frm.doc.mobile) return;\n        \n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Patient',\n                filters: { 'mobile': frm.doc.mobile },\n                fields: ['name', 'patient_name', 'mobile', 'uid']\n            },\n            callback: function(response) {\n                if (response.message.length > 0) {\n                    let table_html = `\n                        <div class=\"panel panel-default\" style=\"max-width: 800px; margin: auto;\">\n                            <div class=\"panel-body\">\n                                <div class=\"table-responsive\">\n                                    <table class=\"table table-bordered table-striped table-hover\">\n                                        <thead style=\"background-color:#f8f9fa;\">\n                                            <tr>\n                                                <th>UID</th>\n                                                <th>Patient Name</th>\n                                                <th>Mobile</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                    `;\n                    \n                    // Sort by UID in ascending order for improved readability\n                    response.message.sort((a, b) => a.uid - b.uid).forEach(patient => {\n                        table_html += `\n                            <tr>\n                                <td>${patient.uid}</td>\n                                <td><a href=\"/app/patient/${patient.name}\" style=\"color:#007bff; text-decoration:underline;\">${patient.patient_name}</a></td>\n                                <td>${patient.mobile}</td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table_html += `\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                    `;\n                    \n                    // Display the panel in a message print\n                    frappe.msgprint({\n                        title: __('Duplicate Patients List'),\n                        message: table_html,\n                        indicator: 'red'\n                    });\n                }\n            }\n        });\n    }\n});\n\n// Helper functions\n\n// Define generateInvoiceHandler function at the global scope\nfunction generateInvoiceHandler(frm) {\n    // Prevent multiple dialogs from being shown simultaneously\n    if (window.current_patient_dialog_active) {\n        console.log(\"Dialog already active, not showing another one\");\n        return;\n    }\n    \n    // Set global flag that we're showing a dialog\n    window.current_patient_dialog_active = true;\n    \n    let patient_territory = frm.doc.territory;\n    let is_registered = frm.doc.custom_is_registered;\n    \n    // If patient is already registered, we should disable registration_only option\n    let enable_registration_only = !is_registered;\n    let registration_fee = 0;\n    let today = new Date(frappe.datetime.get_today());\n    let cached_token = null;\n    \n    let dialog = new frappe.ui.Dialog({\n        title: 'Generate Invoice',\n        fields: [\n            {\n                fieldtype: 'Section Break',\n                label: 'Patient Details'\n            },\n            {\n                fieldtype: 'Data',\n                fieldname: 'patient_name',\n                label: 'Patient Name',\n                default: frm.doc.patient_name,\n                read_only: 1\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                fieldtype: 'Data',\n                fieldname: 'registration_period',\n                label: 'Registration Period',\n                default: frm.doc.custom_registration_period,\n                read_only: 1\n            },\n            {\n                fieldtype: 'Section Break',\n                label: 'Invoice Details'\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'doctor_name',\n                label: 'Doctor Name',\n                reqd: 1, // Makes this field mandatory\n                options: 'Healthcare Practitioner',\n                change: function() {\n                    let doctor = dialog.get_value('doctor_name');\n                    if (doctor) {\n                        // Check if consultation is valid for this doctor\n                        checkConsultationValidity(frm, doctor, dialog);\n                        \n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Healthcare Practitioner',\n                                name: doctor\n                            },\n                            callback: function(r) {\n                                if (r.message) {\n                                    // logic here\n                                    console.log(\"patient\", patient_territory);\n                                    let consultation_territory_find = r.message.custom_consultation_fee_structure.find(c => c.consultation_territory === patient_territory);\n                                    let consultation_territory_amt = consultation_territory_find ? consultation_territory_find.consultation_fee : null;\n                                    \n                                    let consultation_fee = parseFloat(consultation_territory_amt || 0);\n                                    dialog.set_value('consultation_charge', consultation_fee);\n                                    updateTable(dialog, parseFloat(dialog.registration_fee || 0), consultation_fee, is_registered, frm, doctor);\n                                }\n                            }\n                        });\n                        \n                        frappe.call({\n                            method: 'health_sil.services.appointment_api.manage_token',\n                            args: {\n                                practitioner_name: doctor\n                            },\n                            callback: function(r) {\n                                if (r.message) {\n                                    cached_token = r.message;\n                                    dialog.set_value('token_number', r.message);\n                                }\n                            }\n                        });\n                    }\n                }\n            },\n            {\n                fieldtype: 'Data',\n                fieldname: 'consultation_charge',\n                label: 'Consultation Charge',\n                read_only: 1\n            },\n            {\n                fieldtype: 'HTML',\n                fieldname: 'consultation_validity_info',\n                label: 'Consultation Validity'\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                fieldtype: 'Data',\n                fieldname: 'token_number',\n                label: 'Token Number'\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'mode_of_payment',\n                label: 'Mode of Payment',\n                options: 'Mode of Payment',\n                default: \"Cash\",\n                reqd: 1\n            },\n            {\n                fieldtype: 'Check',\n                fieldname: 'registration_only',\n                label: 'Registration Only',\n                depends_on: enable_registration_only ? \"\" : \"eval:0\", // Hide if already registered\n                change: function() {\n                    let reg_only = dialog.get_value('registration_only');\n                    \n                    // Hide/disable consultation-related fields when registration_only is checked\n                    dialog.set_df_property('doctor_name', 'reqd', !reg_only);\n                    \n                    dialog.set_value('doctor_name', '', reg_only);\n                    dialog.set_value('token_number', '', reg_only);\n                    dialog.set_value('consultation_charge', '', reg_only);\n                    dialog.set_value('consultation_validity_info', '', reg_only);\n                    \n                    \n                    // Toggle visibility of appropriate fields\n                    dialog.fields_dict.doctor_name.$wrapper.toggle(!reg_only);\n                    dialog.fields_dict.consultation_charge.$wrapper.toggle(!reg_only);\n                    dialog.fields_dict.consultation_validity_info.$wrapper.toggle(!reg_only);\n                    dialog.fields_dict.token_number.$wrapper.toggle(!reg_only);\n                    \n                    // Update the items table to show/hide consultation fee\n                    updateTable(\n                        dialog,\n                        parseFloat(dialog.registration_fee || 0),\n                        reg_only ? 0 : parseFloat(dialog.get_value('consultation_charge') || 0),\n                        frm.doc.custom_is_registered,\n                        frm,\n                        reg_only ? null : dialog.get_value('doctor_name')\n                    );\n                    \n                    // Toggle buttons visibility\n                    if(reg_only) {\n                        dialog.get_primary_btn().show();\n                        dialog.get_secondary_btn().hide();\n                    } else {\n                        // If doctor is selected, manage button visibility based on consultation validity\n                        let doctor = dialog.get_value('doctor_name');\n                        if(doctor) {\n                            checkConsultationValidity(frm, doctor, dialog);\n                        }\n                    }\n                }\n            },\n            {\n                fieldtype: 'Section Break'\n            },\n            {\n                fieldtype: 'HTML',\n                fieldname: 'items_table'\n            }\n        ],\n        primary_action_label: \"Generate Bill\",\n        primary_action: function(values) {\n            frappe.confirm(\n                __('Are you sure you want to generate this bill?'),\n                function() {\n                    // If confirmed\n                    let generate_btn = dialog.get_primary_btn();\n                    generate_btn.prop('disabled', true); // Disable button\n                    generate_btn.html(`<i class=\"fa fa-spinner fa-spin\"></i> Generating...`); // Show loading indicator\n                    \n                    let reg_fee = parseFloat(dialog.registration_fee || 0);\n                    let consult_fee = parseFloat(values.consultation_charge || 0);\n                    let items = [];\n                    \n                    if (!is_registered && reg_fee > 0) {\n                        items.push({\n                            item_code: \"Registration Fee\",\n                            qty: 1,\n                            rate: reg_fee\n                        });\n                    }\n                    \n                    if (consult_fee > 0 && !dialog.consultation_valid) {\n                        items.push({\n                            item_code: \"Consultation Fee\",\n                            qty: 1,\n                            rate: consult_fee\n                        });\n                    }\n                    \n                    if (items.length === 0) {\n                        frappe.msgprint(__('Please select at least one service before generating an invoice'), 'Warning');\n                        generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                        return;\n                    }\n                    \n                    console.log(\"token\", values.token_number);\n                    \n                    // add token to token history\n                    if(values.token_number){\n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Healthcare Practitioner',\n                                name: values.doctor_name\n                            },\n                            callback: function(r) {\n                                if (r.message) {\n                                    let doctor_doc = r.message;\n                                    let today = frappe.datetime.get_today();\n                                    let token_series = cached_token.split('-')[0];\n                                    let last_token = parseInt(cached_token.split('-')[1]);\n                                    \n                                    doctor_doc.custom_token_history = doctor_doc.custom_token_history || [];\n                                    \n                                    // Check if today's entry exists\n                                    let today_entry = doctor_doc.custom_token_history.find(entry => entry.date === today);\n                                    \n                                    if (today_entry) {\n                                        // Update the existing token\n                                        today_entry.last_token = last_token;\n                                    } else {\n                                        // Add new token entry\n                                        doctor_doc.custom_token_history.push({\n                                            token_series: token_series,\n                                            last_token: last_token,\n                                            date: today\n                                        });\n                                    }\n                                    \n                                    frappe.call({\n                                        method: 'frappe.client.save',\n                                        args: {\n                                            doc: doctor_doc\n                                        },\n                                        callback: function() {\n                                            frappe.msgprint(`Token Generated: <b>${cached_token}</b>`, __(\"Success\"));\n                                        }\n                                    });\n                                } else {\n                                    frappe.msgprint(\"Doctor not found.\");\n                                }\n                            }\n                        });\n                    }\n                    \n                    // generate the invoice\n                    if(values.registration_only){\n                        // Check if patient is already registered first\n                        if(frm.doc.custom_is_registered) {\n                            frappe.msgprint(__(\"This patient is already registered.\"));\n                            generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                            return;\n                        }\n                        \n                        const hasConsultation = items.some(i => i.item_code === \"Consultation Fee\");\n                        if(hasConsultation) {\n                            frappe.msgprint(__(\"Cannot include consultation in registration-only\"));\n                            generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                            return;\n                        }\n                        \n                        frappe.call({\n                            method: 'health_sil.services.generate_bill_registration.create_registration_only',\n                            args: {\n                                patient: frm.doc.name,\n                                patient_name: frm.doc.patient_name,\n                                items: items,\n                                mode_of_payment: values.mode_of_payment,\n                            },\n                            callback: function(r) {\n                                if (r.message) {\n                                    frappe.msgprint({\n                                        title: __('Invoice & Payment Created'),\n                                        message: __('Sales Invoice {0} generated successfully.', [r.message.sales_invoice]),\n                                        indicator: 'green'\n                                    });\n                                    \n                                    dialog.hide();\n                                    // Refresh the form to show updated registration status\n                                    frm.reload_doc();\n                                    frappe.set_route('print', 'Sales Invoice', r.message.sales_invoice);\n                                } else if (r.exc) {\n                                    // Show error message from server\n                                    frappe.msgprint({\n                                        title: __('Registration Failed'),\n                                        message: __('Could not complete registration: {0}', [r.exc]),\n                                        indicator: 'red'\n                                    });\n                                }\n                                \n                                generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                            }\n                        });\n                    } else {\n                        frappe.call({\n                            method: 'health_sil.services.generate_bill_api.create_sales_invoice',\n                            args: {\n                                patient: frm.doc.name,\n                                patient_name: frm.doc.patient_name,\n                                doctor: values.doctor_name,\n                                mode_of_payment: values.mode_of_payment,\n                                items: items,\n                                encounter_token: values.token_number\n                            },\n                            callback: function(r) {\n                                if (r.message) {\n                                    // Call to update patient's consultation validity\n                                    if (!dialog.consultation_valid) {\n                                        updateConsultationValidity(frm, values.doctor_name);\n                                    }\n                                    \n                                    frappe.msgprint({\n                                        title: __('Invoice & Payment Created'),\n                                        message: __('Sales Invoice {0} and Payment Entry {1} generated successfully.', [r.message.sales_invoice, r.message.payment_entry]),\n                                        indicator: 'green'\n                                    });\n                                    \n                                    dialog.hide();\n                                    frappe.set_route('print', 'Sales Invoice', r.message.sales_invoice);\n                                }\n                                \n                                generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                            }\n                        });\n                    }\n                },\n                function() {\n                    // If canceled\n                    console.log(\"Bill generation canceled.\");\n                }\n            );\n        },\n        secondary_action_label: \"Generate Token\",\n        secondary_action: function(values) {\n            frappe.confirm(\n                __('Are you sure you want to generate the token?'),\n                function () {\n                    let doctor = dialog.get_value('doctor_name');\n                    if (!doctor) {\n                        frappe.msgprint(\"Please select a doctor.\");\n                        return;\n                    }\n                    \n                    frappe.call({\n                        method: \"health_sil.services.generate_bill_api.create_patient_encounter\",\n                        args: {\n                            patient: frm.doc.name,\n                            doctor: doctor,\n                            company: frappe.defaults.get_user_default(\"Company\"), // Ensure company is passed\n                            encounter_token: cached_token // Token value if available\n                        },\n                        callback: function(r) {\n                            if (r.message) {\n                                frappe.msgprint({\n                                    message: `Patient Encounter Created</a>`,\n                                    title: \"Success\",\n                                    indicator: \"blue\",\n                                    alert: true\n                                });\n                                \n                                frappe.call({\n                                    method: 'frappe.client.get',\n                                    args: {\n                                        doctype: 'Healthcare Practitioner',\n                                        name: doctor\n                                    },\n                                    callback: function(r) {\n                                        if (r.message) {\n                                            let doctor_doc = r.message;\n                                            let today = frappe.datetime.get_today();\n                                            let token_series = cached_token.split('-')[0];\n                                            let last_token = parseInt(cached_token.split('-')[1]);\n                                            \n                                            doctor_doc.custom_token_history = doctor_doc.custom_token_history || [];\n                                            \n                                            // Check if today's entry exists\n                                            let today_entry = doctor_doc.custom_token_history.find(entry => entry.date === today);\n                                            \n                                            if (today_entry) {\n                                                // Update the existing token\n                                                today_entry.last_token = last_token;\n                                            } else {\n                                                // Add new token entry\n                                                doctor_doc.custom_token_history.push({\n                                                    token_series: token_series,\n                                                    last_token: last_token,\n                                                    date: today\n                                                });\n                                            }\n                                            \n                                            frappe.call({\n                                                method: 'frappe.client.save',\n                                                args: {\n                                                    doc: doctor_doc\n                                                },\n                                                callback: function() {\n                                                    frappe.msgprint({\n                                                        message: `Token Generated: ${cached_token}`,\n                                                        title: \"Success\",\n                                                        indicator: \"green\",\n                                                        alert: true\n                                                    });\n                                                }\n                                            });\n                                        } else {\n                                            frappe.msgprint(\"Doctor not found.\");\n                                        }\n                                    }\n                                });\n                            } else {\n                                frappe.msgprint(\"No encounter created.\");\n                            }\n                        }\n                    });\n                    \n                    dialog.hide();\n                },\n                function () {\n                    console.log(\"Token generation canceled.\");\n                }\n            );\n        },\n        onhide: function() {\n            // Reset the global dialog active flag when dialog is closed\n            window.current_patient_dialog_active = false;\n        }\n    });\n    \n    dialog.get_primary_btn().hide();\n    dialog.get_secondary_btn().hide();\n    \n    let patient = frm.doc.name;\n    if (patient) {\n        frappe.call({\n            method: 'health_sil.services.appointment_api.check_last_encounter',\n            args: { patient },\n            callback: function(r) {\n                if (r.message.has_encounter) {\n                    dialog.set_value('doctor_name', r.message.doctor);\n                    dialog.get_secondary_btn().show();\n                } else {\n                    console.log('This patient has no previous encounters.');\n                }\n            }\n        });\n    }\n    \n    if (!is_registered) {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Registration Fee',\n                filters: { territory: patient_territory },\n                fields: ['registration_fee']\n            },\n            callback: function(r) {\n                if (r.message && r.message.length > 0) {\n                    registration_fee = parseFloat(r.message[0].registration_fee || 0);\n                    dialog.registration_fee = registration_fee;\n                    updateTable(dialog, registration_fee, 0, is_registered, frm);\n                }\n            }\n        });\n    } else {\n        dialog.registration_fee = 0;\n        updateTable(dialog, 0, 0, is_registered, frm);\n    }\n    \n    dialog.show();\n}\n\n// Check if patient has a valid consultation with the selected doctor\nfunction checkConsultationValidity(frm, doctor, dialog) {\n    let today = new Date(frappe.datetime.get_today());\n    \n    // Clear old content\n    dialog.fields_dict.consultation_validity_info.$wrapper.html(\"\");\n    \n    // Default both buttons to hidden, reset field visibility\n    let primary_btn = dialog.get_primary_btn();\n    let secondary_btn = dialog.get_secondary_btn();\n    \n    if (primary_btn) primary_btn.hide();\n    if (secondary_btn) secondary_btn.hide();\n    \n    dialog.get_field('consultation_charge').toggle(true); // Assume shown unless consultation is valid\n    \n    // If no consultation validity records\n    if (!frm.doc.custom_consultation_validity || !frm.doc.custom_consultation_validity.length) {\n        dialog.consultation_valid = false;\n        dialog.fields_dict.consultation_validity_info.$wrapper.html(\n            `<div style=\"margin-top: 10px;\"><span style=\"color:red;\">No active consultation for this doctor</span></div>`\n        );\n        \n        if (primary_btn) primary_btn.show();\n        return;\n    }\n    \n    // Search for record for selected doctor\n    let doctorConsultation = frm.doc.custom_consultation_validity.find(row => row.doctor_name === doctor);\n    \n    if (!doctorConsultation) {\n        dialog.consultation_valid = false;\n        dialog.fields_dict.consultation_validity_info.$wrapper.html(\n            `<div style=\"margin-top: 10px;\"><span style=\"color:red;\">No active consultation for this doctor</span></div>`\n        );\n        \n        if (primary_btn) primary_btn.show();\n        return;\n    }\n    \n    // Parse and compare date\n    let validUpto = new Date(doctorConsultation.consultation_valid_upto_date);\n    let formattedDate = validUpto.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n    \n    if (validUpto >= today) {\n        dialog.consultation_valid = true;\n        dialog.fields_dict.consultation_validity_info.$wrapper.html(\n            `<div style=\"margin-top: 10px;\"><span style=\"color:green;\">Consultation Valid Till: ${formattedDate}</span></div>`\n        );\n        \n        if (secondary_btn) secondary_btn.show();\n        dialog.get_field('consultation_charge').toggle(false);\n    } else {\n        dialog.consultation_valid = false;\n        dialog.fields_dict.consultation_validity_info.$wrapper.html(\n            `<div style=\"margin-top: 10px;\"><span style=\"color:red;\">Consultation Expired on: ${formattedDate}</span></div>`\n        );\n        \n        if (primary_btn) primary_btn.show();\n        dialog.get_field('consultation_charge').toggle(true);\n    }\n}\n\n// Function to update consultation validity after payment\nfunction updateConsultationValidity(frm, doctor) {\n    frappe.call({\n        method: 'health_sil.services.consultation_validity.update_consultation_validity',\n        args: {\n            patient: frm.doc.name,\n            doctor: doctor\n        },\n        callback: function(r) {\n            if (r.message && r.message.success) {\n                console.log(\"Consultation validity updated successfully\");\n                // Refresh the form to get updated consultation validity data\n                frm.reload_doc();\n            } else {\n                console.error(\"Failed to update consultation validity:\", r.message ? r.message.error : \"Unknown error\");\n            }\n        }\n    });\n}\n\n// Function to update the items table in the dialog\nfunction updateTable(dialog, registration_fee, consultation_fee, is_registered, frm, doctor = null) {\n    let showTable = false;\n    let rows = '';\n    \n    // Modern styling for the table and inputs\n    const modernCSS = `\n        <style>\n            /* Remove spinner from number inputs */\n            .no-spinner::-webkit-inner-spin-button,\n            .no-spinner::-webkit-outer-spin-button {\n                -webkit-appearance: none;\n                margin: 0;\n            }\n            \n            .no-spinner {\n                -moz-appearance: textfield;\n            }\n            \n            /* Modern table styling */\n            .modern-fee-table {\n                width: 100%;\n                border-collapse: collapse;\n            }\n            \n            .modern-fee-table th {\n                background-color: #eaeff4;\n                color: black;\n                font-weight: 500;\n                font-size: 14px;\n                padding: 10px 15px;\n                border-bottom: 1px solid #ebeef0;\n                text-align: left;\n            }\n            \n            .modern-fee-table th.amount-header {\n                text-align: right;\n            }\n            \n            .modern-fee-table td {\n                padding: 12px 15px;\n                border-bottom: 1px solid #ebeef0;\n                font-size: 14px;\n                color: #192734;\n            }\n            \n            .modern-fee-table tr:last-child td {\n                border-top: 2px solid #ebeef0;\n                border-bottom: none;\n                font-weight: 600;\n            }\n            \n            .amount-column {\n                text-align: right;\n            }\n            \n            .modern-input {\n                background-color: #f8fafc;\n                border: 1px solid #d1d8dd;\n                border-radius: 4px;\n                padding: 6px 8px;\n                width: 120px;\n                color: #192734;\n                font-size: 14px;\n                transition: border-color 0.2s, box-shadow 0.2s;\n                text-align: right;\n            }\n            \n            .modern-input:focus {\n                outline: none;\n                border-color: #5e64ff;\n                box-shadow: 0 0 0 2px rgba(94, 100, 255, 0.1);\n            }\n            \n            .currency-symbol {\n                color: #6c7680;\n                margin-right: 3px;\n            }\n            \n            .total-row {\n                font-weight: 600;\n                font-size: 15px;\n            }\n            \n            .total-amount-value {\n                font-size: 18px;\n                font-weight: 700;\n            }\n            \n            .table-container {\n                border-radius: 8px;\n                background-color: white;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n                overflow: hidden;\n            }\n        </style>\n    `;\n    \n    // Editable Registration Fee Row\n    if (!is_registered) {\n        showTable = true;\n        rows += `\n            <tr>\n                <td>Registration Fee</td>\n                <td class=\"amount-column\">\n                    <span class=\"currency-symbol\">₹</span>\n                    <input type=\"number\" min=\"0\" step=\"0.01\" class=\"fee-input no-spinner modern-input\" data-type=\"reg\" value=\"${registration_fee.toFixed(2)}\" />\n                </td>\n            </tr>\n        `;\n    }\n    \n    // Check if consultation is valid for the selected doctor\n    let consultationValid = false;\n    if (doctor && frm.doc.custom_consultation_validity) {\n        for (let i = 0; i < frm.doc.custom_consultation_validity.length; i++) {\n            let entry = frm.doc.custom_consultation_validity[i];\n            if (entry.doctor_name === doctor) {\n                let validUpto = new Date(entry.consultation_valid_upto_date);\n                let today = new Date(frappe.datetime.get_today());\n                if (validUpto >= today) {\n                    consultationValid = true;\n                    break;\n                }\n            }\n        }\n    }\n    // Editable Consultation Fee Row\n    if (doctor && !consultationValid) {\n        showTable = true;\n        rows += `\n            <tr>\n                <td>Consultation Fee</td>\n                <td class=\"amount-column\">\n                    <span class=\"currency-symbol\">₹</span>\n                    <input type=\"number\" min=\"0\" step=\"0.01\"\n                         class=\"fee-input no-spinner modern-input\" data-type=\"consult\"\n                         value=\"${consultation_fee.toFixed(2)}\" />\n                </td>\n            </tr>\n        `;\n    }\n\n    // Only show total if there are items to charge\n    if (showTable) {\n        let total = (!consultationValid ? consultation_fee : 0) + (!is_registered ? registration_fee : 0);\n        rows += `\n            <tr class=\"total-row\">\n                <td>Total Amount</td>\n                <td class=\"amount-column\">₹ <span id=\"total_amount\" class=\"total-amount-value\">${total.toFixed(2)}</span></td>\n            </tr>\n        `;\n\n        let table_html = `\n            ${modernCSS}\n            <div class=\"table-container\">\n                <table class=\"modern-fee-table\">\n                    <thead>\n                        <tr>\n                            <th>Item</th>\n                            <th class=\"amount-header\">Amount (₹)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${rows}\n                    </tbody>\n                </table>\n            </div>\n        `;\n\n        dialog.fields_dict.items_table.$wrapper.html(table_html);\n\n        // Store the consultation validity state in the dialog\n        dialog.consultation_valid = consultationValid;\n\n        // Attach event listeners after rendering - using jQuery for more reliable event binding\n        setTimeout(() => {\n            // Use jQuery to handle events more reliably\n            dialog.fields_dict.items_table.$wrapper.find('.fee-input').on('input', function() {\n                let regVal = 0;\n                let consultVal = 0;\n                \n                // Get registration fee value if it exists\n                dialog.fields_dict.items_table.$wrapper.find('.fee-input[data-type=\"reg\"]').each(function() {\n                    regVal = parseFloat($(this).val() || 0);\n                });\n                \n                // Get consultation fee value if it exists\n                dialog.fields_dict.items_table.$wrapper.find('.fee-input[data-type=\"consult\"]').each(function() {\n                    consultVal = parseFloat($(this).val() || 0);\n                });\n                \n                const total = regVal + consultVal;\n                \n                // Update the total display\n                dialog.fields_dict.items_table.$wrapper.find('#total_amount').text(total.toFixed(2));\n                \n                // Update dialog stored values for use on submit\n                if ($(this).data('type') === 'reg') {\n                    dialog.registration_fee = regVal;\n                } else if ($(this).data('type') === 'consult') {\n                    dialog.set_value('consultation_charge', consultVal);\n                }\n            });\n        }, 100);\n    } else {\n        dialog.fields_dict.items_table.$wrapper.html('');\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pharmacy Billing",
  "enabled": 1,
  "modified": "2025-05-21 10:21:57.826299",
  "module": "Health Sil",
  "name": "Pharmacy Billing Conditions",
  "script": "frappe.ui.form.on('Pharmacy Billing', {\n    onload: function(frm) {\n        const today = frappe.datetime.get_today();\n        // const today = \"2025-05-22\";\n\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Batch\",\n                fields: [\"name\", \"item\", \"expiry_date\", \"custom_next_reminder_date\"],\n                filters: [\n                    [\"expiry_date\", \"<=\", frappe.datetime.add_days(today, 90)],\n                    [\"expiry_date\", \">=\", today]\n                ],\n                limit_page_length: 100\n            },\n            callback: function(r) {\n                if (r.message && r.message.length > 0) {\n\n                    // 🔍 Filter batches that need to be reminded today\n                    const show_batches = r.message.filter(batch => {\n                        return !batch.custom_next_reminder_date || frappe.datetime.get_diff(batch.custom_next_reminder_date, today) === 0;\n                    });\n\n                    if (show_batches.length === 0) return; //Exit if nothing to show today\n\n                    let options = ['Tomorrow', 'After 7 days', 'After a month', 'Never'];\n                    let table = `\n                        <style>\n                            .expiry-table-wrapper {\n                                margin-top: 10px;\n                                font-family: \"Segoe UI\", Roboto, sans-serif;\n                            }\n                        \n                            .expiry-table {\n                                width: 100%;\n                                border-collapse: collapse;\n                                margin-bottom: 10px;\n                                box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n                                table-layout: fixed;\n                                font-size: 13px;\n\n                            }\n                            \n                            /* Updated column widths */\n                            .expiry-table th:nth-child(1),\n                            .expiry-table td:nth-child(1) {\n                                width: 35%;  /* Item column gets more space */\n                                white-space: normal;\n                                overflow: visible;\n                                text-overflow: unset;\n                            }\n                            \n                            .expiry-table th:nth-child(2),\n                            .expiry-table td:nth-child(2) {\n                                width: 18%;  /* Batch */\n                            }\n                            \n                            .expiry-table th:nth-child(3),\n                            .expiry-table td:nth-child(3) {\n                                width: 15%;  /* Expiry */\n                            }\n                            \n                            .expiry-table th:nth-child(4),\n                            .expiry-table td:nth-child(4) {\n                                width: 12%;  /* Days Left is small */\n                            }\n                            \n                            .expiry-table th:nth-child(5),\n                            .expiry-table td:nth-child(5) {\n                                width: 20%;  /* Remind Me After */\n                            }\n\n                        \n                            .expiry-table th, .expiry-table td {\n                                padding: 10px 12px;\n                                text-align: left;\n                                border-bottom: 1px solid #eaeaea;\n                                white-space: nowrap;\n                                overflow: hidden;\n                                text-overflow: ellipsis;\n                            }\n                        \n                            .expiry-table th {\n                                background-color: #f2f2f2;\n                                font-weight: 600;\n                            }\n                        \n                            .expiry-table tbody tr.red {\n                                background-color: #fdf1f1;\n                            }\n                        \n                            .expiry-table tbody tr.orange {\n                                background-color: #fff6e6;\n                            }\n                        \n                            .expiry-table tbody tr.green {\n                                background-color: #f1fdf1;\n                            }\n                        \n                            .expiry-table tbody tr:hover {\n                                background-color: #f7f7f7;\n                            }\n                        \n                            .red { color: #d9534f; font-weight: bold; }\n                            .orange { color: #f0ad4e; font-weight: bold; }\n                            .green { color: #5cb85c; font-weight: bold; }\n                        \n                            .styled-select {\n                                padding: 6px 8px;\n                                font-size: 13px;\n                                border-radius: 4px;\n                                border: 1px solid #ccc;\n                                background: #fff;\n                                width: 100%;\n                                box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);\n                                font-family: \"Segoe UI\", Roboto, sans-serif;\n                            }\n                        \n                            .expiry-ok-btn-wrapper {\n                                text-align: right;\n                                margin-top: 8px;\n                            }\n                        \n                            .expiry-ok-btn-wrapper .btn {\n                                background-color: #1d1d1d;  /* ERP Black */\n                                color: #fff;\n                                padding: 6px 16px;\n                                font-weight: 500;\n                                border-radius: 4px;\n                                border: none;\n                                transition: background 0.2s;\n                            }\n                            \n                            .expiry-ok-btn-wrapper .btn:hover {\n                                background-color: #333;\n                            }\n                        </style>\n\n                    \n                        <div class=\"expiry-table-wrapper\">\n                            <table class=\"expiry-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Item</th>\n                                        <th>Batch</th>\n                                        <th>Expiry</th>\n                                        <th>Days Left</th>\n                                        <th>Remind Me After</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                    `;\n                    \n                    show_batches.forEach(batch => {\n                        const days_left = frappe.datetime.get_diff(batch.expiry_date, today);\n                        let color_class = \"green\", default_option = \"After 7 days\";\n                    \n                        if (days_left <= 7) {\n                            color_class = \"red\";\n                            default_option = \"Tomorrow\";\n                        } else if (days_left <= 30) {\n                            color_class = \"orange\";\n                            default_option = \"After 7 days\";\n                        }\n                    \n                        table += `\n                            <tr class=\"${color_class}\">\n                                <td>${batch.item}</td>\n                                <td>${batch.name}</td>\n                                <td>${batch.expiry_date}</td>\n                                <td>${days_left}</td>\n                                <td>\n                                    <select data-batch=\"${batch.name}\" class=\"styled-select\">\n                                        ${options.map(opt =>\n                                            `<option value=\"${opt}\" ${opt === default_option ? 'selected' : ''}>${opt}</option>`\n                                        ).join(\"\")}\n                                    </select>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += `\n                                </tbody>\n                            </table>\n                            <div class=\"expiry-ok-btn-wrapper\">\n                                <button class=\"btn\" id=\"expiry-ok-btn\">Save</button>\n                            </div>\n                        </div>\n                    `;\n                    \n                    const dialog = frappe.msgprint({\n                        title: \"Medicines Near Expiry\",\n                        message: table,\n                        indicator: \"red\"\n                    });\n                    \n                    dialog.$wrapper.find('.modal-dialog').css({\n                        'width': '65%',\n                        'max-width': '1500px'\n                    });\n\n\n                    //Save selected reminders to Batch\n                    $(document).on('click', '#expiry-ok-btn', function() {\n                        $(\"select[data-batch]\").each(function() {\n                            const batch = $(this).data(\"batch\");\n                            const choice = $(this).val();\n                            let snooze_days = 1;\n\n                            if (choice === \"Tomorrow\") snooze_days = 1;\n                            else if (choice === \"After 7 days\") snooze_days = 7;\n                            else if (choice === \"After a month\") snooze_days = 30;\n                            else if (choice === \"Never\") snooze_days = 9999;\n\n                            const snooze_until = frappe.datetime.add_days(today, snooze_days);\n\n                            frappe.call({\n                                method: 'frappe.client.set_value',\n                                args: {\n                                    doctype: 'Batch',\n                                    name: batch,\n                                    fieldname: {\n                                        'custom_next_reminder_date': snooze_until\n                                    }\n                                }\n                            });\n                        });\n\n                        frappe.msgprint(__('Reminder preferences saved!'));\n                        frappe.hide_msgprint();\n                    });\n                }\n            }\n        });\n    },\n    \n    patient_name: function (frm) {\n        if (!frm.doc.patient_name) return;\n        \n        let patient = frm.doc.patient_name;\n        \n        if(patient){\n            frappe.call({\n                method: 'health_sil.services.appointment_api.check_last_encounter',\n                args: { patient },\n                callback: function(r) {\n                    if (r.message.has_encounter) {\n                        frm.set_value('healthcare_practitioner', r.message.doctor);\n                    } else {\n                        console.log('No doctor found.');\n                    }\n                }\n            });\n        }\n    },\n    \n    on_submit: function (frm) {\n        console.log(\"submit....\");\n    \n        // Construct items array from lab_items\n        const items = (frm.doc.medicines || []).map(row => ({\n            item_code: row.item_code,\n            item_name: row.item_name,\n            qty: row.qty,\n            rate: row.new_mrp,\n            amount: row.final_total,\n            amount_before_discount: row.amount,\n            batch_no: row.batch\n        }));\n    \n        // Generate the invoice\n        frappe.call({\n            method: 'health_sil.services.generate_invoice_api.create_sales_invoice',\n            args: {\n                patient: frm.doc.name,\n                patient_name: frm.doc.patient_name,\n                doctor: frm.doc.healthcare_practitioner,\n                mode_of_payment: frm.doc.custom_mode_of_payment,\n                items: items\n            },\n            callback: function(r) {\n                if (r.message) {\n                    frappe.msgprint({\n                        title: __('Invoice & Payment Created'),\n                        message: __('Sales Invoice {0} and Payment Entry generated successfully.', \n                            [r.message.name]),\n                        indicator: 'green'\n                    });\n                    // Assuming 'dialog' is defined elsewhere in your code\n                    if (typeof dialog !== 'undefined') {\n                        dialog.hide();\n                    }\n                    frappe.set_route('print', 'Pharmacy Billing', frm.doc.name);\n                }\n            }\n        });\n    },\n    \n    healthcare_practitioner: function(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                }).catch(err => {\n                    console.error(\"Error fetching department:\", err);\n                });\n        }\n        \n    },\n    refresh: function(frm) {\n        if (frm.doc.docstatus == 0 ) {\n            $('button').each(function() {\n                if ($(this).attr('data-original-title') === \"Print\") {\n                    $(this).hide();\n                }\n            });\n        }\n        \n        frm.fields_dict.medicines.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"  // Show only pharmacy-related items\n                }\n            };\n        };\n        frm.fields_dict.medicines.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"  // Show only pharmacy-related items\n                }\n            };\n        };\n    },\n    \n    validate: function (frm) {\n        let required_main_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        let required_row_fields = [\"item_code\", \"qty\", \"mrp\", \"amount\",\"gst_\"];\n        let missing_fields = [];\n\n        // *Check Main Form Fields**\n        required_main_fields.forEach(field => {\n            if (!frm.doc[field]) {\n                missing_fields.push(__(frappe.meta.get_label(frm.doctype, field, frm.doc.name)));\n            }\n        });\n\n        // *Check Each Row in Medicines Table**\n        if (frm.doc.medicines && frm.doc.medicines.length > 0) {\n            for (let row of frm.doc.medicines) {\n                for (let field of required_row_fields) {\n                    if (!row[field]) {\n                        frappe.msgprint(__(\"Please fill all required fields in the medicines table before saving.\"));\n                        frappe.validated = false;\n                        return;\n                    }\n                }\n            }\n        }\n\n        // *Stop Saving If Any Main Field is Missing**\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \"<br><b>\" + missing_fields.join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n        \n    },\n    \n    before_print: function(frm) {\n        let item_count = frm.doc.medicines.length; // Adjust for your item field\n\n        // Choose print format based on item count\n        let print_format = item_count > 10 ? \"Long Invoice Format\" : \"Pharmacy Inv\";\n\n        // Set the selected print format before printing\n        frm.meta.default_print_format = print_format;\n    },\n    \n    custom_discount_mode(frm) {\n        calculate_totals(frm);\n    },\n    custom_amount_of_discount(frm) {\n        if (frm.doc.custom_discount_mode === \"Cash\") {\n            calculate_totals(frm);\n        }\n    },\n    custom_percentage_of_discount(frm) {\n        if (frm.doc.custom_discount_mode === \"Percentage\") {\n            calculate_totals(frm);\n        }\n    }\n    \n});\n\nfrappe.ui.form.on('Pharmaceuticals', {\n    // Recalculate totals whenever the medicines table is modified\n    medicines_add: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        // Get all existing medicines in the child table\n        let medicines = frm.doc.medicines || [];\n\n        // Check for duplicate item_code\n        let is_duplicate = medicines.some((med) => med.item_code === row.item_code && med.item_name !== row.item_name);\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This medicine is already added to the bill. Please update the quantity instead.'));\n            \n            // Remove the duplicate row\n            frappe.model.clear_table(cdt, cdn);\n            frm.refresh_field(\"medicines\");\n            return;\n        }\n\n        calculate_totals(frm);\n    },\n    \n    medicines_remove: function(frm) {\n        calculate_totals(frm);\n    },\n    \n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        let medicines = frm.doc.medicines || [];\n\n        // Check for duplicate item_code (excluding the current row)\n        let is_duplicate = medicines.some(med => med.item_code === row.item_code && med.name !== row.name);\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This medicine is already added. Update the quantity instead.'));\n            \n            // Remove the duplicate row\n            frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n            frappe.model.set_value(cdt, cdn, \"item_name\", \"\");\n            frm.refresh_field(\"medicines\");\n            return;\n        }\n\n        fetch_item_details(frm, cdt, cdn, \"item_code\", row.item_code);\n    },\n    \n    item_name: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (!row.item_name) return;\n    \n        // Fetch item using item_name\n        frappe.db.get_value(\"Item\", { \"item_name\": row.item_name }, \"name\")\n            .then(res => {\n                if (res.message && res.message.name) {\n                    frappe.model.set_value(cdt, cdn, \"item_code\", res.message.name);\n    \n                    // Reuse the existing logic by calling fetch_item_details\n                    fetch_item_details(frm, cdt, cdn, \"item_code\", res.message.name);\n                } else {\n                    frappe.msgprint(__(\"No matching item found for the selected item name.\"));\n                }\n            })\n            .catch(err => {\n                console.error(\"Error fetching item by name:\", err);\n            });\n    },\n    \n    qty: function (frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let tablets_per_strip = row.tablets_per_strip ?? 1;\n        if (tablets_per_strip > 0) {\n            frappe.model.set_value(cdt, cdn, \"strips\", Math.floor(row.qty / tablets_per_strip) || 0);\n            frappe.model.set_value(cdt, cdn, \"nos\", row.qty % tablets_per_strip || 0);\n        } else {\n            frappe.model.set_value(cdt, cdn, \"strips\", 0);\n            frappe.model.set_value(cdt, cdn, \"nos\", row.qty);\n        }\n\n        // **Calculate GST Per Unit**\n        let base_price = row.custom_original_mrp || 0;  // Ensure a valid base price\n        let gst_ = row.gst_ || 0;\n        let tax_per_unit = (base_price * gst_) / 100;\n        let final_price = base_price + tax_per_unit;  // Rate after GST\n        \n        // **Calculate GST Breakdown**\n        let cgst_amount = ((tax_per_unit / 2) * row.qty) || 0;\n        let sgst_amount = ((tax_per_unit / 2) * row.qty) || 0;\n        let total_tax = (tax_per_unit * row.qty) || 0;\n\n        // **Calculate Final Values**\n        let amount_before_tax = base_price * row.qty;\n        let amount_after_tax = final_price * row.qty;\n\n        // **Apply Discount**\n        let discount_rate = row.discount_ || 0;\n        let discount_amount = (amount_before_tax * discount_rate) / 100;\n        let total_after_discount = amount_before_tax - discount_amount;\n\n        // **Recalculate GST on Discounted Amount**\n        let total_tax_after_discount = (total_after_discount * gst_) / 100;\n        let final_amount = total_after_discount + total_tax_after_discount;\n        let new_cgst = total_tax_after_discount / 2;\n        let new_sgst = total_tax_after_discount / 2;\n\n        // **Update Values in Form**\n        frappe.model.set_value(cdt, cdn, \"rate\", final_price);\n        frappe.model.set_value(cdt, cdn, \"amount_before_tax\", amount_before_tax);\n        frappe.model.set_value(cdt, cdn, \"cgst_amount\", new_cgst);\n        frappe.model.set_value(cdt, cdn, \"sgst_amount\", new_sgst);\n        frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax_after_discount);\n        frappe.model.set_value(cdt, cdn, \"discounted_amount\", discount_amount);\n        frappe.model.set_value(cdt, cdn, \"amount\", final_amount);\n\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    gst_: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n    \n        if (!row.custom_original_mrp || row.gst_ === undefined) {\n            console.warn(\"Missing Original MRP or GST for:\", row.item_code);\n            return;\n        }\n    \n        try {\n            // **Always Use Original MRP for Calculation**\n            let base_price = row.custom_original_mrp;  \n            let tax_per_unit = (base_price * row.gst_) / 100;\n            let new_mrp = base_price + tax_per_unit;  // Increase GST from original MRP\n    \n            /// **Calculate GST Per Unit**\n            let cgst_amount = (tax_per_unit / 2) * row.qty;\n            let sgst_amount = (tax_per_unit / 2) * row.qty;\n            let total_tax = tax_per_unit * row.qty;\n            let final_total = new_mrp * row.qty;  // Total amount including GST\n    \n            /// **Update Fields**\n            frappe.model.set_value(cdt, cdn, \"mrp\", new_mrp);\n            frappe.model.set_value(cdt, cdn, \"cgst_amount\", cgst_amount);\n            frappe.model.set_value(cdt, cdn, \"sgst_amount\", sgst_amount);\n            frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax);\n            frappe.model.set_value(cdt, cdn, \"amount\", final_total);\n    \n        } catch (error) {\n            console.error(\"Error updating GST values:\", error);\n        }\n    \n        // **Recalculate Totals for Entire Bill**\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    discount_: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let base_amount = row.amount_before_tax || 0;  // Base amount before GST\n        let discount_amount = row.discount_ || 0;\n        let total_amount = base_amount - discount_amount;\n\n        /// **Recalculate GST After Discount**\n        let gst_rate = row.gst_ || 0;\n        let total_tax = (total_amount * gst_rate) / 100;\n        \n        let cgst_amount = total_tax / 2;\n        let sgst_amount = total_tax / 2;\n\n        /// **Final Amount Calculation**\n        let final_total = total_amount + total_tax;\n\n        /// **Update Values in Form**\n        frappe.model.set_value(cdt, cdn, \"discounted_amount\", discount_amount);\n        frappe.model.set_value(cdt, cdn, \"total_amount\", total_amount);\n        frappe.model.set_value(cdt, cdn, \"cgst_amount\", cgst_amount);\n        frappe.model.set_value(cdt, cdn, \"sgst_amount\", sgst_amount);\n        frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax);\n        frappe.model.set_value(cdt, cdn, \"amount\", final_total);\n\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    medicines_add: function (frm) {\n        let medicines = frm.doc.medicines;\n        \n        // Ensure there's a previous row before validation\n        if (medicines.length > 1) {\n            let last_row_index = medicines.length - 2;\n            let last_row = medicines[last_row_index]; // Get the previous row\n            \n            if (!last_row) {\n                console.warn(\"Last row not found. Skipping validation.\");\n                return;\n            }\n\n            let required_fields = [\"item_code\", \"qty\", \"mrp\", \"amount\"];\n            for (let field of required_fields) {\n                if (!last_row[field] || (field === \"qty\" && last_row[field] <= 0)) {\n                    frappe.msgprint(__(\"Please complete the previous row before adding a new one.\"));\n                    \n                    // Remove the added row after a slight delay\n                    setTimeout(() => {\n                        if (frm.doc.medicines.length > last_row_index + 1) {\n                            frm.doc.medicines.splice(last_row_index + 1, 1);  \n                            frm.refresh_field(\"medicines\");\n                        }\n                    }, 100);\n\n                    return;\n                }\n            }\n        }\n    },\n});\n\nfunction fetch_item_details(frm, cdt, cdn, field, value) {\n    if (value) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: \"Item\",\n                name: value\n            },\n            callback: function(r) {\n                if (r.message) {\n                    let row = locals[cdt][cdn];\n\n                    // Set Item Details\n                    frappe.model.set_value(cdt, cdn, \"item_code\", value);\n                    frappe.model.set_value(cdt, cdn, \"item_name\", r.message.item_name || \"\");\n                    frappe.model.set_value(cdt, cdn, \"hsn\", r.message.gst_hsn_code || \"\");\n                    frappe.model.set_value(cdt, cdn, \"tablets_per_strip\", r.message.weight_per_unit ?? 1);\n                    frappe.model.set_value(cdt, cdn, \"mrp\", r.message.valuation_rate || 0);\n                    \n                    // **Store Original MRP (Only if not set)**\n                    if (!row.custom_original_mrp) {\n                        frappe.model.set_value(cdt, cdn, \"custom_original_mrp\", r.message.valuation_rate);\n                    }\n                    \n                    \n                    let taxes_data = r.message.taxes || [];\n                    \n                    if (taxes_data.length > 0) {\n                        let tax_template = taxes_data[0].item_tax_template;\n        \n                        if (tax_template) {\n                            frappe.call({\n                                method: 'frappe.client.get_value',\n                                args: {\n                                    doctype: \"Item Tax Template\",\n                                    fieldname: \"gst_rate\",\n                                    filters: { name: tax_template }\n                                },\n                                callback: function(res2) {\n                                    if (res2.message && res2.message.gst_rate !== undefined) {\n                                        frappe.model.set_value(cdt, cdn, \"gst_\", res2.message.gst_rate);\n                                    } else {\n                                        frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                                    }\n                                }\n                            });\n                        } else {\n                            frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                        }\n                    } else {\n                        frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                    }\n\n                    // Fetch batch details\n                    fetch_batch_details(frm, cdt, cdn, value);\n                } else {\n                    frappe.msgprint(__('Item details not found!'));\n                }\n            }\n        });\n    }\n}\n\n// Function to Fetch Batch Details\nfunction fetch_batch_details(frm, cdt, cdn, item_code) {\n    console.log(\"fetch_batch_details:\",item_code)\n    frappe.db.get_value(\"Batch\", { \"item\": item_code }, [\"batch_id\", \"expiry_date\"])\n        .then(r => {\n            console.log(r.message)\n            if (r.message) {\n                frappe.model.set_value(cdt, cdn, \"batch\", r.message.batch_id || \"\");\n                frappe.model.set_value(cdt, cdn, \"expiry_date\", r.message.expiry_date || \"\");\n               \n                // frm.refresh_field(\"medicines\");\n            } else {\n                frappe.msgprint(__('Batch details not found!'));\n            }\n        }).catch(err => {\n            console.error('Error fetching batch:', err);\n        });\n}\n\nfunction calculate_totals(frm) {\n    let total_qty = 0;\n    let total_before_tax = 0;\n    let total_tax = 0;\n    let total_cgst = 0;\n    let total_sgst = 0;\n    let grand_total = 0;\n    let total_items = 0;\n    let saved_amount = 0;\n    let total_before_discount = 0;\n\n    if (frm.doc.medicines && frm.doc.medicines.length > 0) {\n        total_items = frm.doc.medicines.length; // Count total rows in medicines table\n        \n        frm.doc.medicines.forEach(row => {\n            total_qty += row.qty || 0;\n            total_before_tax += row.amount_before_tax || 0;\n            total_cgst += row.cgst_amount || 0;\n            total_sgst += row.sgst_amount || 0;\n            total_tax += row.tax_amount || 0;\n            grand_total += row.amount || 0;\n            saved_amount += row.discounted_amount || 0;\n            \n        });\n    }\n\n    frm.set_value(\"total_quantity\", total_qty);\n    frm.set_value(\"custom_sub_total_before_tax\", total_before_tax);\n    frm.set_value(\"custom_total_cgst\", total_cgst);\n    frm.set_value(\"custom_total_sgst\", total_sgst);\n    frm.set_value(\"custom_total_tax_amount\", total_tax);\n    frm.set_value(\"total_amount\", grand_total);\n    frm.set_value(\"total_items\", total_items); // Set total number of medicines in bill\n    frm.set_value(\"saved_amount\", saved_amount);\n    \n    let discount_mode = frm.doc.custom_discount_mode;\n    let discount_value = 0;\n\n    if (discount_mode === \"Cash\" && frm.doc.custom_amount_of_discount) {\n        discount_value = frm.doc.custom_amount_of_discount;\n    } else if (discount_mode === \"Percentage\" && frm.doc.custom_percentage_of_discount) {\n        discount_value = (frm.doc.total_amount * frm.doc.custom_percentage_of_discount) / 100;\n    }\n\n    let final_total = frm.doc.total_amount - discount_value;\n    saved_amount += discount_value || 0;\n    frm.set_value(\"total_amount\", final_total);\n    frm.set_value(\"saved_amount\", saved_amount);\n    \n    let rounded_total = Math.round(frm.doc.total_amount || 0);\n    frm.set_value(\"rounded_total_amount\", rounded_total);\n\n    // Use the whitelisted function\n    frappe.call({\n        method: \"health_sil.services.money_in_words_api.money_in_words_api\",  // Change `healthcare_management` to your app name\n        args: { amount: rounded_total },\n        callback: function(r) {\n            if (r.message) {\n                frm.set_value(\"amount_in_words\", r.message);\n            }\n        }\n    });\n    \n    apply_total_discount(frm);\n\n    frm.refresh_fields([\"total_quantity\", \"total_amount\", \"custom_total_tax_amount\", \"custom_total_cgst\", \"custom_total_sgst\", \"custom_sub_total_before_tax\",\"total_items\",\"saved_amount\",\"rounded_total_amount\"]);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure Bill",
  "enabled": 1,
  "modified": "2025-04-30 14:48:27.868189",
  "module": "Health Sil",
  "name": "Cinical procedure Billing Conditions",
  "script": "// Clinical Procedure Bill - Parent Doctype\nfrappe.ui.form.on('Clinical Procedure Bill', {\n    patient_name: async function (frm) {\n        if (!frm.doc.patient_name) return;\n\n        for (const row of frm.doc.nursing_items) {\n            if (!row.item_code) continue;\n\n            try {\n                const r = await frappe.call({\n                    method: \"health_sil.services.price_list_api.get_country_specific_price\",\n                    args: {\n                        item_code: row.item_code,\n                        patient_id: frm.doc.patient_name\n                    }\n                });\n\n                if (r.message) {\n                    const rate = r.message;\n                    frappe.model.set_value(row.doctype, row.name, \"rate\", rate);\n                    if (row.qty) {\n                        frappe.model.set_value(row.doctype, row.name, \"amount\", row.qty * rate);\n                        frappe.model.set_value(row.doctype, row.name, \"amount_before_discount\", row.qty * rate);\n                    }\n                }\n            } catch (err) {\n                console.error(\"Error fetching rate:\", err);\n            }\n        }\n\n        calculate_totals(frm);\n        \n        let patient = frm.doc.patient_name;\n        \n        frappe.db.get_value('Patient', frm.doc.patient_name, 'default_price_list')\n            .then(res => {\n                if (res.message && res.message.default_price_list) {\n                    let pricelist = res.message.default_price_list;\n                    frm.set_value(\"custom_patient_price_list\", pricelist || \"\");\n                    console.log(\"Pricelist fetched for patient:\", pricelist);\n                }\n            })\n            .catch(err => {\n                console.error(\"Error fetching pricelist for the patient:\", err);\n            });\n        \n        if(patient){\n            frappe.call({\n                method: 'health_sil.services.appointment_api.check_last_encounter',\n                args: { patient },\n                callback: function(r) {\n                    if (r.message.has_encounter) {\n                        frm.set_value('healthcare_practitioner', r.message.doctor);\n                    } else {\n                        console.log('No doctor found.');\n                    }\n                }\n            });\n        }\n    },\n    \n    on_submit: function (frm) {\n        console.log(\"submit....\");\n    \n        // Construct items array from lab_items\n        const items = (frm.doc.nursing_items || []).map(row => ({\n            item_code: row.item_code,\n            item_name: row.item_name,\n            qty: row.qty,\n            rate: row.rate,\n            amount: row.amount,\n            amount_before_discount: row.amount_before_discount\n        }));\n    \n        // Generate the invoice\n        frappe.call({\n            method: 'health_sil.services.generate_invoice_api.create_sales_invoice',\n            args: {\n                patient: frm.doc.name,\n                patient_name: frm.doc.patient_name,\n                doctor: frm.doc.healthcare_practitioner,\n                mode_of_payment: frm.doc.custom_mode_of_payment,\n                items: items,\n                price_list: frm.doc.custom_patient_price_list\n            },\n            callback: function(r) {\n                if (r.message) {\n                    frappe.msgprint({\n                        title: __('Invoice & Payment Created'),\n                        message: __('Sales Invoice {0} and Payment Entry generated successfully.', \n                            [r.message.name]),\n                        indicator: 'green'\n                    });\n                    // Assuming 'dialog' is defined elsewhere in your code\n                    if (typeof dialog !== 'undefined') {\n                        dialog.hide();\n                    }\n                    frappe.set_route('print', 'Clinical Procedure Bill', frm.doc.name);\n                }\n            }\n        });\n    },\n\n    healthcare_practitioner(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                }).catch(err => {\n                    console.error(\"Error fetching department:\", err);\n                });\n        }\n    },\n\n    refresh(frm) {\n        \n        if (frm.doc.docstatus == 0 ) {\n            $('button').each(function() {\n                if ($(this).attr('data-original-title') === \"Print\") {\n                    $(this).hide();\n                }\n            });\n        }\n        \n        // Restrict item selection to \"Medical Procedures\"\n        [\"item_code\", \"item_name\"].forEach(field => {\n            frm.fields_dict.nursing_items.grid.get_field(field).get_query = function() {\n                return { filters: { \"item_group\": \"Medical Procedures\" } };\n            };\n        });\n    },\n\n    validate(frm) {\n        const required_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        const missing_fields = required_fields.filter(field => !frm.doc[field]);\n\n        if (frm.doc.nursing_items?.length > 0) {\n            const incomplete_row = frm.doc.nursing_items.find(row =>\n                !row.item_code || !row.rate || !row.amount_before_discount\n            );\n            if (incomplete_row) {\n                frappe.msgprint(__(\"Please fill all required fields in the Nursing Items table before saving.\"));\n                frappe.validated = false;\n                return;\n            }\n        }\n\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \"<br><b>\" +\n                    missing_fields.map(f => __(frappe.meta.get_label(frm.doctype, f, frm.doc.name))).join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n    },\n\n    custom_discount_mode(frm) {\n        calculate_totals(frm);\n    },\n    custom_amount_of_discount(frm) {\n        if (frm.doc.custom_discount_mode === \"Cash\") {\n            calculate_totals(frm);\n        }\n    },\n    custom_percentage_of_discount(frm) {\n        if (frm.doc.custom_discount_mode === \"Percentage\") {\n            calculate_totals(frm);\n        }\n    }\n});\n\n// Nursing Items - Child Table\nfrappe.ui.form.on('Nursing Items', {\n    nursing_items_add: frm => calculate_totals(frm),\n    nursing_items_remove: frm => calculate_totals(frm),\n\n    item_code(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) return;\n\n        frappe.model.set_value(cdt, cdn, \"qty\", 1);\n\n        frappe.db.get_value(\"Item\", { item_code: row.item_code }, [\"item_name\", \"item_group\", \"valuation_rate\"])\n            .then(async r => {\n                if (!r.message) {\n                    frappe.msgprint(__('Item not found!'));\n                    return;\n                }\n\n                const { item_name, item_group, valuation_rate } = r.message;\n                frappe.model.set_value(cdt, cdn, \"item_name\", item_name);\n\n                let rate = valuation_rate || 0;\n\n                if (frm.doc.patient_name && item_group !== \"Medications\") {\n                    try {\n                        const res = await frappe.call({\n                            method: \"health_sil.services.price_list_api.get_country_specific_price\",\n                            args: {\n                                item_code: row.item_code,\n                                patient_id: frm.doc.patient_name\n                            }\n                        });\n\n                        rate = res.message || rate;\n                    } catch (err) {\n                        console.error(\"Error fetching price:\", err);\n                    }\n                }\n\n                frappe.model.set_value(cdt, cdn, {\n                    rate,\n                    amount_before_discount: rate,\n                    amount: rate\n                });\n\n                frm.refresh_field(\"nursing_items\");\n                calculate_totals(frm);\n            })\n            .catch(err => {\n                console.error('Error fetching item info:', err);\n            });\n    }\n});\n\n// Utility - Total Calculation\nfunction calculate_totals(frm) {\n    let total_qty = 0, total_before_discount = 0, total_items = 0;\n\n    (frm.doc.nursing_items || []).forEach(row => {\n        total_qty += row.qty || 0;\n        total_before_discount += row.amount_before_discount || 0;\n    });\n\n    total_items = frm.doc.nursing_items?.length || 0;\n\n    let discount_mode = frm.doc.custom_discount_mode;\n    let discount_value = 0;\n\n    if (discount_mode === \"Cash\" && frm.doc.custom_amount_of_discount) {\n        discount_value = frm.doc.custom_amount_of_discount;\n    } else if (discount_mode === \"Percentage\" && frm.doc.custom_percentage_of_discount) {\n        discount_value = (total_before_discount * frm.doc.custom_percentage_of_discount) / 100;\n    }\n\n    const final_total = total_before_discount - discount_value;\n    const rounded_total = Math.round(final_total);\n\n    frm.set_value({\n        total_quantity: total_qty,\n        total_amount: final_total,\n        total_items,\n        saved_amount: discount_value,\n        rounded_total_amount: rounded_total\n    });\n\n    frappe.call({\n        method: \"health_sil.services.money_in_words_api.money_in_words_api\",\n        args: { amount: rounded_total },\n        callback(r) {\n            if (r.message) {\n                frm.set_value(\"amount_in_words\", r.message);\n            }\n        }\n    });\n\n    frm.refresh_fields([\n        \"total_quantity\", \"total_amount\", \"total_items\",\n        \"saved_amount\", \"rounded_total_amount\"\n    ]);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Laboratory Bill",
  "enabled": 1,
  "modified": "2025-06-03 14:46:58.417574",
  "module": "Health Sil",
  "name": "Laboratory Billing Conditions",
  "script": "let active_lab_test_dialog = null;\n// Laboratory Bill - Parent Doctype\nfrappe.ui.form.on('Laboratory Bill', {\n    patient_name: function(frm) {\n        if (!frm.doc.patient_name) return;\n\n        // Update rates for existing lab items\n        frm.doc.lab_items.forEach(row => {\n            if (!row.item_code) return;\n\n            frappe.call({\n                method: \"health_sil.services.price_list_api.get_country_specific_price\",\n                args: {\n                    item_code: row.item_code,\n                    patient_id: frm.doc.patient_name\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frappe.model.set_value(row.doctype, row.name, \"rate\", r.message);\n                        \n                        if (row.qty) {\n                            frappe.model.set_value(row.doctype, row.name, \"amount\", row.qty * r.message);\n                            frappe.model.set_value(row.doctype, row.name, \"amount_before_discount\", row.qty * r.message);\n                        }\n                        \n                        calculate_totals(frm);\n                    }\n                }\n            });\n        });\n\n        // Fetch patient's default price list\n        const patient = frm.doc.patient_name;\n        frappe.db.get_value('Patient', frm.doc.patient_name, 'default_price_list')\n            .then(res => {\n                if (res.message && res.message.default_price_list) {\n                    const pricelist = res.message.default_price_list;\n                    frm.set_value(\"custom_patient_price_list\", pricelist || \"\");\n                    console.log(\"Pricelist fetched for patient:\", pricelist);\n                }\n            })\n            .catch(err => {\n                console.error(\"Error fetching pricelist for the patient:\", err);\n            });\n\n        // Check for last encounter and set healthcare practitioner\n        if (patient) {\n            frappe.call({\n                method: 'health_sil.services.appointment_api.check_last_encounter',\n                args: { patient },\n                callback: function(r) {\n                    if (r.message.has_encounter) {\n                        frm.set_value('healthcare_practitioner', r.message.doctor);\n                    } else {\n                        console.log('No doctor found.');\n                    }\n                }\n            });\n        }\n    },\n\n    on_submit: function(frm) {\n        console.log(\"submit....\");\n        \n        // Construct items array from lab_items\n        const items = (frm.doc.lab_items || []).map(row => ({\n            item_code: row.item_code,\n            item_name: row.item_name,\n            qty: row.qty,\n            rate: row.rate,\n            amount: row.amount,\n            amount_before_discount: row.amount_before_discount\n        }));\n\n        // Generate the invoice\n        frappe.call({\n            method: 'health_sil.services.generate_invoice_api.create_sales_invoice',\n            args: {\n                patient: frm.doc.name,\n                patient_name: frm.doc.patient_name,\n                doctor: frm.doc.healthcare_practitioner,\n                mode_of_payment: frm.doc.custom_mode_of_payment,\n                items: items,\n                price_list: frm.doc.custom_patient_price_list\n            },\n            callback: function(r) {\n                if (r.message) {\n                    frappe.msgprint({\n                        title: __('Invoice & Payment Created'),\n                        message: __('Sales Invoice {0} and Payment Entry generated successfully.', [r.message.name]),\n                        indicator: 'green'\n                    });\n\n                    // Hide dialog if defined elsewhere\n                    if (typeof dialog !== 'undefined') {\n                        dialog.hide();\n                    }\n\n                    frappe.set_route('print', 'Laboratory Bill', frm.doc.name);\n                }\n            }\n        });\n    },\n\n    healthcare_practitioner: function(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                })\n                .catch(err => {\n                    console.error(\"Error fetching department:\", err);\n                });\n        }\n    },\n\n    refresh: function(frm) {\n        // Realtime listener (optional if needed for lab test created events)\n        if (!window.labTestRealtimeBound) {\n            frappe.realtime.on('lab_test_created', function(data) {\n                if (data && data.bill_name === frm.doc.name) {\n                    frappe.show_alert({\n                        message: `Lab Test result submitted for <b>${data.item_code}</b>. <a style=\"color:#007bff; cursor:pointer;\" onclick=\"location.reload()\">Click to refresh</a>.`,\n                        indicator: 'green'\n                    }, 15);\n                }\n            });\n            window.labTestRealtimeBound = true;\n        }\n    \n        // Custom Button for \"Enter Results\"\n        if (frm.doc.docstatus === 1) {\n            frm.add_custom_button(\"Enter Results\", () => {\n                frappe.call({\n                    method: \"health_sil.services.lab_test_api.get_lab_tests_by_bill\",\n                    args: { lab_bill: frm.doc.name },\n                    callback: function(r) {\n                        const tests = r.message || [];\n                        let html = `<table class=\"table table-bordered\"><thead><tr><th>Test</th><th>Action</th></tr></thead><tbody>`;\n                        tests.forEach((test, idx) => {\n                            let actionBtn = '';\n                            if (!test.name) {\n                                actionBtn = `<button class=\"btn btn-primary\" onclick=\"frappe.throw('No Lab Test Found')\">Add Result</button>`;\n                            } else if (test.docstatus === 1) {\n                                actionBtn = `\n                                    <a href=\"/app/lab-test/${test.name}\" target=\"_blank\" class=\"text-success font-weight-bold\">${test.name}</a>\n                                    <button class=\"btn btn-secondary ml-2\" onclick=\"window.open(&quot;/printview?doctype=Lab Test&amp;name=${test.name}&amp;trigger_print=1&quot;)\">Print</button>`;\n                            } else {\n                                actionBtn = `\n                                    <button class=\"btn btn-warning enter-result-btn\" data-test-id=\"${test.name}\">\n                                        Enter Result\n                                    </button>`;\n                            }\n                            html += `<tr><td>${test.template}</td><td>${actionBtn}</td></tr>`;\n                        });\n                        html += `</tbody></table>`;\n                        active_lab_test_dialog = new frappe.ui.Dialog({\n                            title: 'Lab Tests for This Bill',\n                            fields: [{ fieldtype: 'HTML', fieldname: 'lab_test_table', options: html }],\n                            primary_action: () => {},  // not used here\n                        });\n                    \n                    active_lab_test_dialog.show();\n                    \n                    // Attach click event dynamically\n                    setTimeout(() => {\n                        active_lab_test_dialog.$wrapper.find('.enter-result-btn').on('click', function () {\n                            const lab_test_id = $(this).data('test-id');\n                            open_result_dialog(lab_test_id);\n                        });\n                    }, 300);\n                    }\n                });\n            });\n        }\n    \n        // Hide print button if doc is in draft\n        if (frm.doc.docstatus === 0) {\n            $('button').each(function () {\n                if ($(this).attr('data-original-title') === \"Print\") {\n                    $(this).hide();\n                }\n            });\n        }\n    \n        // Set filters for lab item selection\n        frm.fields_dict.lab_items.grid.get_field(\"item_code\").get_query = function () {\n            return {\n                filters: {\n                    \"item_group\": \"Laboratory\"\n                }\n            };\n        };\n        frm.fields_dict.lab_items.grid.get_field(\"item_name\").get_query = function () {\n            return {\n                filters: {\n                    \"item_group\": \"Laboratory\"\n                }\n            };\n        };\n    }\n\n,\n\n    validate: function(frm) {\n        const required_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        const missing_fields = required_fields.filter(field => !frm.doc[field]);\n\n        // Validate lab items table\n        if (frm.doc.lab_items?.length > 0) {\n            const incomplete_row = frm.doc.lab_items.find(row => \n                !row.item_code || !row.rate || !row.amount_before_discount\n            );\n\n            if (incomplete_row) {\n                frappe.msgprint(__(\"Please fill all required fields in the Lab Items table before saving.\"));\n                frappe.validated = false;\n                return;\n            }\n        }\n\n        // Validate required fields\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \n                        \"<br><b>\" + \n                        missing_fields.map(f => __(frappe.meta.get_label(frm.doctype, f, frm.doc.name))).join(\", \") + \n                        \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n    },\n\n    custom_discount_mode: function(frm) {\n        calculate_totals(frm);\n    },\n\n    custom_amount_of_discount: function(frm) {\n        if (frm.doc.custom_discount_mode === \"Cash\") {\n            calculate_totals(frm);\n        }\n    },\n\n    custom_percentage_of_discount: function(frm) {\n        if (frm.doc.custom_discount_mode === \"Percentage\") {\n            calculate_totals(frm);\n        }\n    }\n});\n\n// Lab Items - Child Table\nfrappe.ui.form.on('Lab Items', {\n    lab_items_add: function(frm) {\n        calculate_totals(frm);\n    },\n\n    lab_items_remove: function(frm) {\n        calculate_totals(frm);\n    },\n\n    item_code: function(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        // Prevent duplicate item codes\n        const is_duplicate = (frm.doc.lab_items || []).some(item => \n            item.item_code === row.item_code && item.name !== row.name\n        );\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This item is already added.'));\n            frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n            frappe.model.set_value(cdt, cdn, \"item_name\", \"\");\n            return;\n        }\n\n        if (!row.item_code) return;\n\n        // Fetch item details\n        frappe.db.get_value(\"Item\", { item_code: row.item_code }, [\"item_name\", \"valuation_rate\"])\n            .then(r => {\n                if (!r.message) {\n                    frappe.msgprint(__('Item details not found!'));\n                    return;\n                }\n\n                const item_name = r.message.item_name;\n                const item_group = r.message.item_group;\n\n                frappe.model.set_value(cdt, cdn, \"item_name\", item_name);\n                frappe.model.set_value(cdt, cdn, \"qty\", 1);\n\n                // Use custom price logic based on territory if patient exists and item is not medication\n                if (frm.doc.patient_name && item_group !== \"Medications\") {\n                    frappe.call({\n                        method: \"health_sil.services.price_list_api.get_country_specific_price\",\n                        args: {\n                            item_code: row.item_code,\n                            patient_id: frm.doc.patient_name\n                        },\n                        callback: function(res) {\n                            const rate = res.message || 0;\n                            frappe.model.set_value(cdt, cdn, \"rate\", rate);\n                            frappe.model.set_value(cdt, cdn, \"amount_before_discount\", rate);\n                            frappe.model.set_value(cdt, cdn, \"amount\", rate);\n                            frm.refresh_field(\"lab_items\");\n                            calculate_totals(frm);\n                        }\n                    });\n                } else {\n                    // Fallback to valuation rate for Medications or no patient selected\n                    frappe.db.get_value(\"Item\", { item_code: row.item_code }, \"valuation_rate\")\n                        .then(val => {\n                            const rate = val.message?.valuation_rate || 0;\n                            frappe.model.set_value(cdt, cdn, \"rate\", rate);\n                            frappe.model.set_value(cdt, cdn, \"amount_before_discount\", rate);\n                            frappe.model.set_value(cdt, cdn, \"amount\", rate);\n                            frm.refresh_field(\"lab_items\");\n                            calculate_totals(frm);\n                        });\n                }\n            })\n            .catch(err => {\n                console.error('Error fetching item info:', err);\n            });\n    }\n});\n\n// Utility Functions\nfunction calculate_totals(frm) {\n    let total_qty = 0;\n    let total_before_discount = 0;\n    let total_items = 0;\n\n    // Calculate totals from lab items\n    (frm.doc.lab_items || []).forEach(row => {\n        total_qty += row.qty || 0;\n        total_before_discount += row.amount_before_discount || 0;\n    });\n\n    total_items = frm.doc.lab_items?.length || 0;\n\n    // Calculate discount\n    const discount_mode = frm.doc.custom_discount_mode;\n    let discount_value = 0;\n\n    if (discount_mode === \"Cash\" && frm.doc.custom_amount_of_discount) {\n        discount_value = frm.doc.custom_amount_of_discount;\n    } else if (discount_mode === \"Percentage\" && frm.doc.custom_percentage_of_discount) {\n        discount_value = (total_before_discount * frm.doc.custom_percentage_of_discount) / 100;\n    }\n\n    // Calculate final totals\n    const final_total = total_before_discount - discount_value;\n    const rounded_total = Math.round(final_total);\n\n    // Set calculated values\n    frm.set_value(\"total_quantity\", total_qty);\n    frm.set_value(\"total_amount\", final_total);\n    frm.set_value(\"total_items\", total_items);\n    frm.set_value(\"saved_amount\", discount_value);\n    frm.set_value(\"rounded_total_amount\", rounded_total);\n\n    // Convert amount to words\n    frappe.call({\n        method: \"health_sil.services.money_in_words_api.money_in_words_api\",\n        args: { amount: rounded_total },\n        callback: function(r) {\n            if (r.message) {\n                frm.set_value(\"amount_in_words\", r.message);\n            }\n        }\n    });\n\n    // Refresh fields\n    frm.refresh_fields([\n        \"total_quantity\",\n        \"total_amount\", \n        \"total_items\",\n        \"saved_amount\",\n        \"rounded_total_amount\"\n    ]);\n}\n\nfunction open_result_dialog(lab_test_id) {\n    frappe.call({\n        method: \"health_sil.services.lab_test_api.get_lab_test_result_fields\",\n        args: { lab_test_id },\n        callback: function(r) {\n            let html = `\n                <style>\n                    .lab-result-table td input {\n                        width: 100%;\n                    }\n                    .lab-result-header {\n                        background-color: #f7f7f9;\n                        font-weight: bold;\n                    }\n                </style>\n                <table class=\"table table-sm table-striped lab-result-table\">\n                    <thead class=\"lab-result-header\">\n                        <tr>\n                            <th>Test</th>\n                            <th>Result</th>\n                            <th>UOM</th>\n                            <th>Normal Range</th>\n                        </tr>\n                    </thead>\n                    <tbody>`;\n            \n            r.message.rows.forEach(row => {\n                html += `\n                    <tr>\n                        <td>${row.lab_test_name}</td>\n                        <td><input type=\"text\" class=\"form-control form-control-sm\" data-name=\"${row.name}\" name=\"result_value_${row.name}\" /></td>\n                        <td>${row.uom || ''}</td>\n                        <td>${(row.normal_range || '').replace(/\\n/g, '<br>')}</td>\n                    </tr>`;\n            });\n            html += `</tbody></table>`;\n\n            const resultDialog = new frappe.ui.Dialog({\n                title: `Enter Results - ${r.message.template}`,\n                fields: [{\n                    fieldname: \"results_table\",\n                    fieldtype: \"HTML\",\n                    options: html\n                }],\n                primary_action_label: \"Submit Results\",\n                primary_action() {\n                    const values = {};\n                    r.message.rows.forEach(row => {\n                        const input = resultDialog.$wrapper.find(`[name=result_value_${row.name}]`).val();\n                        values[row.name] = input;\n                    });\n                \n                    // Move confirmation outside of resultDialog logic chain\n                    const confirmDialog = new frappe.ui.Dialog({\n                        title: \"Confirm Submission\",\n                        fields: [\n                            {\n                                fieldtype: \"HTML\",\n                                options: \"<p>Are you sure you want to submit these results?</p>\"\n                            }\n                        ],\n                        primary_action_label: \"Yes\",\n                        primary_action: () => {\n                            // Submit only on confirmation\n                            frappe.call({\n                                method: \"health_sil.services.lab_test_api.submit_lab_test_with_results\",\n                                args: {\n                                    lab_test_id: r.message.lab_test_id,\n                                    results: values\n                                },\n                                callback: () => {\n                                    frappe.msgprint(\"Results saved and submitted.\");\n                                    confirmDialog.hide();\n                                    resultDialog.hide();\n                            \n                                    // Refresh only the dialog, not full form\n                                    show_updated_lab_tests_dialog(cur_frm.doc.name);\n                                }\n                            });\n                        },\n                        secondary_action_label: \"No\",\n                        secondary_action: () => {\n                            confirmDialog.hide();\n                            resultDialog.show(); // Return to the input dialog\n                        }\n                    });\n                \n                    resultDialog.hide(); // Hide temporarily\n                    confirmDialog.show(); // This is critical!\n                }\n            });\n\n            resultDialog.show();\n            \n            resultDialog.$wrapper.find('.modal-dialog').css({\n                width: \"80%\",\n                maxWidth: \"1200px\"\n            });\n            \n            // Add this immediately after showing the dialog\n            resultDialog.$wrapper.find('input').on('keydown', function(e) {\n                if (e.key === 'Enter') e.preventDefault();\n            });\n        }\n    });\n}\n\nfunction show_updated_lab_tests_dialog(lab_bill_name) {\n    if (active_lab_test_dialog && active_lab_test_dialog.$wrapper.is(':visible')) {\n        active_lab_test_dialog.hide();  // Close any previously open dialog\n        active_lab_test_dialog = null;\n    }\n\n    frappe.call({\n        method: \"health_sil.services.lab_test_api.get_lab_tests_by_bill\",\n        args: { lab_bill: lab_bill_name },\n        callback: function(r) {\n            const tests = r.message || [];\n            const html = build_lab_test_table(tests);\n\n            active_lab_test_dialog = new frappe.ui.Dialog({\n                title: 'Lab Tests for This Bill',\n                fields: [{ fieldtype: 'HTML', fieldname: 'lab_test_table', options: html }],\n                primary_action: () => {}\n            });\n\n            active_lab_test_dialog.show();\n            bind_test_action_buttons();\n        }\n    });\n}\n\nfunction build_lab_test_table(tests) {\n    let html = `\n        <style>\n            .lab-action-btns {\n                display: flex;\n                flex-wrap: wrap;\n                gap: 8px;\n                align-items: center;\n            }\n            .lab-test-name {\n                font-weight: 600;\n                font-size: 14px;\n            }\n        </style>\n        <table class=\"table table-hover table-striped table-bordered\">\n            <thead class=\"thead-dark\">\n                <tr>\n                    <th>Test</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>`;\n\n    tests.forEach(test => {\n        let actionBtn = '';\n        const testNameLink = test.name\n            ? `<a href=\"/app/lab-test/${test.name}\" target=\"_blank\" class=\"lab-test-name text-primary\">${test.template}</a>`\n            : `<span class=\"text-muted\">${test.template}</span>`;\n\n        if (!test.name) {\n            actionBtn = `<button class=\"btn btn-sm btn-primary\" onclick=\"frappe.throw('No Lab Test Found')\">Add Result</button>`;\n        } else if (test.docstatus === 1) {\n            actionBtn = `\n                <div class=\"lab-action-btns\">\n                    <span class=\"badge badge-success\">Submitted</span>\n                    <button class=\"btn btn-sm btn-secondary\" onclick=\"window.open('/printview?doctype=Lab Test&name=${encodeURIComponent(test.name)}&trigger_print=1')\">🖨 Print</button>\n                </div>`;\n        } else {\n            actionBtn = `\n                <div class=\"lab-action-btns\">\n                    <button class=\"btn btn-sm btn-warning enter-result-btn\" data-test-id=\"${test.name}\">🧪 Enter Result</button>\n                </div>`;\n        }\n\n        html += `<tr>\n            <td>${testNameLink}</td>\n            <td>${actionBtn}</td>\n        </tr>`;\n    });\n\n    html += `</tbody></table>`;\n    return html;\n}\n\n\nfunction bind_test_action_buttons() {\n    setTimeout(() => {\n        active_lab_test_dialog?.$wrapper.find('.enter-result-btn')\n            .off('click')\n            .on('click', function () {\n                const lab_test_id = $(this).data('test-id');\n                active_lab_test_dialog.hide();\n                open_result_dialog(lab_test_id);\n            });\n    }, 300);\n}\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Encounter",
  "enabled": 1,
  "modified": "2025-05-19 11:00:45.889320",
  "module": "Health Sil",
  "name": "Medicines in Patient encounter",
  "script": "frappe.ui.form.on('Patient Encounter', {\n    refresh: function(frm) {\n        // 🔬 Laboratory Item Filters\n        frm.fields_dict.custom_laboratory_tests.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Laboratory\"\n                }\n            };\n        };\n        frm.fields_dict.custom_laboratory_tests.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Laboratory\"\n                }\n            };\n        };\n\n        // 💊 Medications Item Filters (if also needed)\n        frm.fields_dict.custom_medicinal_prescription.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"\n                }\n            };\n        };\n        frm.fields_dict.custom_medicinal_prescription.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"\n                }\n            };\n        };\n        // Medical Procedures Item Filters\n        frm.fields_dict.custom_medical_procedures.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medical Procedures\"\n                }\n            };\n        };\n        frm.fields_dict.custom_medical_procedures.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medical Procedures\"\n                }\n            };\n        };\n    }\n});\n\n\n\nfrappe.ui.form.on('Pharmaceuticals', {\n    item_name: function(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        if (!row.item_name) return;\n\n        frappe.db.get_value('Item', { item_name: row.item_name }, 'name')\n            .then(res => {\n                if (res.message && res.message.name) {\n                    frappe.model.set_value(cdt, cdn, 'item_code', res.message.name);\n                } else {\n                    frappe.msgprint(__('No Item Code found for this Item Name.'));\n                }\n            });\n    },\n\n    item_code: function(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        if (!row.item_code) return;\n\n        frappe.db.get_value('Item', row.item_code, 'item_name')\n            .then(res => {\n                if (res.message && res.message.item_name) {\n                    frappe.model.set_value(cdt, cdn, 'item_name', res.message.item_name);\n                } else {\n                    frappe.msgprint(__('No Item Name found for this Item Code.'));\n                }\n            });\n    }\n});\n\nfrappe.ui.form.on('Lab Items', {\n    item_name: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (!row.item_name) return;\n\n        frappe.db.get_value('Item', { item_name: row.item_name }, 'name')\n            .then(res => {\n                if (res.message?.name) {\n                    frappe.model.set_value(cdt, cdn, 'item_code', res.message.name);\n                }\n            });\n    },\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (!row.item_code) return;\n\n        frappe.db.get_value('Item', row.item_code, 'item_name')\n            .then(res => {\n                if (res.message?.item_name) {\n                    frappe.model.set_value(cdt, cdn, 'item_name', res.message.item_name);\n                }\n            });\n    }\n});\n\nfrappe.ui.form.on('Nursing Items', {\n    item_name: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (!row.item_name) return;\n\n        frappe.db.get_value('Item', { item_name: row.item_name }, 'name')\n            .then(res => {\n                if (res.message?.name) {\n                    frappe.model.set_value(cdt, cdn, 'item_code', res.message.name);\n                }\n            });\n    },\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (!row.item_code) return;\n\n        frappe.db.get_value('Item', row.item_code, 'item_name')\n            .then(res => {\n                if (res.message?.item_name) {\n                    frappe.model.set_value(cdt, cdn, 'item_name', res.message.item_name);\n                }\n            });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-05-19 10:26:54.928849",
  "module": "Health Sil",
  "name": "Item selection And Selling Rate for Medicines",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        frm.fields_dict.items.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"  // Show only pharmacy-related items\n                }\n            };\n        };\n        frm.fields_dict.items.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"  // Show only pharmacy-related items\n                }\n            };\n        };\n    },\n})\n\nfrappe.ui.form.on('Purchase Invoice Item', {\n    custom_mrp(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n    \n        if (!row.custom_mrp || !row.item_tax_template) {\n            frappe.msgprint(__('Please enter MRP and select an Item Tax Template.'));\n                return;\n        }\n    \n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Tax Template',\n                name: row.item_tax_template\n            },\n            callback: function (r) {\n                if (r.message && r.message.gst_rate || 0) {\n                    let gst_rate = r.message.gst_rate;\n                    let valuation_rate = row.custom_mrp / (1 + (gst_rate / 100));\n                    row.custom_valuation_rate = valuation_rate.toFixed(3)/row.conversion_factor;\n                    frm.refresh_field('items');\n                } else {\n                    frappe.msgprint(__('No taxes found in selected Item Tax Template.'));\n                }\n            }\n        });\n    },\n    \n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pharmacy Billing",
  "enabled": 1,
  "modified": "2025-05-23 09:28:58.089720",
  "module": "Health Sil",
  "name": "Pharmacy Billing from Patient Encounter",
  "script": "frappe.ui.form.on('Pharmacy Billing', {\n    refresh(frm) {\n        frm.add_custom_button('Get from Patient Encounter', async () => {\n            if (!frm.doc.patient_name) {\n                frappe.msgprint(__('Please enter Patient name'));\n                return;\n            }\n            try {\n                const result = await frappe.call({\n                    method: \"frappe.client.get_list\",\n                    args: {\n                        doctype: \"Patient Encounter\",\n                        filters: { patient: frm.doc.patient_name },\n                        fields: [\"name\", \"patient\", \"encounter_date\", \"custom_encounter_token\", \"practitioner\", \"modified\", \"title\"],\n                        order_by: \"modified desc\",\n                        limit_page_length: 20\n                    }\n                });\n                const encounters = result.message;\n                if (!encounters.length) {\n                    frappe.msgprint(\"No Patient Encounters found for this patient.\");\n                    return;\n                }\n                \n                // Add custom CSS for the dialog\n                const customStyles = `\n                    <style>\n                        .encounter-table {\n                            border-collapse: separate;\n                            border-spacing: 0;\n                            width: 100%;\n                            border-radius: 8px;\n                            overflow: hidden;\n                            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                        }\n                        \n                        .encounter-table thead {\n                            background: #4172b4;\n                            color: white;\n                        }\n                        \n                        .encounter-table th {\n                            padding: 12px 15px;\n                            font-weight: 600;\n                            text-align: left;\n                            font-size: 13px;\n                        }\n                        \n                        .encounter-table td {\n                            padding: 10px 15px;\n                            border-bottom: 1px solid #e0e0e0;\n                            vertical-align: middle;\n                        }\n                        \n                        .encounter-table tbody tr:last-child td {\n                            border-bottom: none;\n                        }\n                        \n                        .encounter-table tbody tr:nth-child(even) {\n                            background-color: #f7f9fc;\n                        }\n                        \n                        .encounter-table tbody tr:hover {\n                            background-color: #f0f4f9;\n                        }\n                        \n                        .enc-checkbox {\n                            width: 18px;\n                            height: 18px;\n                            cursor: pointer;\n                        }\n                        \n                        .enc-checkbox:checked {\n                            accent-color: #4172b4;\n                        }\n                        \n                        .enc-date {\n                            color: #555;\n                            font-weight: 500;\n                        }\n                        \n                        .enc-token {\n                            font-weight: 600;\n                            color: #4172b4;\n                        }\n                        \n                        .modal-body {\n                            padding: 0 !important;\n                        }\n                        \n                        .table-container {\n                            padding: 15px;\n                            max-height: 400px;\n                            overflow-y: auto;\n                        }\n                    </style>\n                `;\n                \n                // Build a table-style HTML with improved styling\n                let html = `\n                    ${customStyles}\n                    <div class=\"table-container\">\n                        <table class=\"encounter-table\">\n                            <thead>\n                                <tr>\n                                    <th style=\"width: 60px\">Select</th>\n                                    <th>Encounter</th>\n                                    <th>Date</th>\n                                    <th>Token</th>\n                                </tr>\n                            </thead>\n                            <tbody>`;\n                \n                encounters.forEach(enc => {\n                    html += `\n                        <tr>\n                            <td style=\"text-align: center\">\n                                <input type=\"checkbox\" class=\"enc-radio enc-checkbox\" value=\"${enc.name}\"/>\n                            </td>\n                            <td>${enc.title || \"Untitled Encounter\"}</td>\n                            <td class=\"enc-date\">${frappe.datetime.str_to_user(enc.encounter_date)}</td>\n                            <td class=\"enc-token\">${enc.custom_encounter_token || \"-\"}</td>\n                        </tr>`;\n                });\n                \n                html += `</tbody></table></div>`;\n                \n                const d = new frappe.ui.Dialog({\n                    title: \"Select Patient Encounter\",\n                    fields: [\n                        {\n                            fieldname: \"encounter_table\",\n                            fieldtype: \"HTML\",\n                            options: html\n                        }\n                    ],\n                    primary_action_label: \"Get Prescription\",\n                    primary_action() {\n                        const selected = $('input.enc-radio:checked').val();\n                        if (!selected) {\n                            frappe.msgprint(\"Please select an encounter first.\");\n                            return;\n                        }\n                        \n                        // Fetch prescriptions from the selected encounter\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Patient Encounter\",\n                                name: selected\n                            },\n                            callback: function(data) {\n                                if (!data.message) {\n                                    frappe.msgprint(\"Could not fetch the encounter details.\");\n                                    return;\n                                }\n                                \n                                const encounter = data.message;\n                                \n                                // Check if custom_medicine_prescription exists and has items\n                                if (!encounter.custom_medicine_prescription || !encounter.custom_medicine_prescription.length) {\n                                    frappe.msgprint(\"No medicine prescriptions found in this encounter.\");\n                                    return;\n                                }\n                                \n                                // Clear existing items in the medicines table if needed\n                                frm.doc.medicines = frm.doc.medicines || [];\n                                \n                                // Add each prescribed medicine to the medicines child table\n                                encounter.custom_medicine_prescription.forEach(med => {\n                                    // Create a new row in the medicines child table\n                                    const medicine_row = frappe.model.add_child(frm.doc, \"Pharmaceuticals\", \"medicines\");\n                                    \n                                    // Copy data from prescription to the new row\n                                    medicine_row.item_code = med.item_code;\n                                    medicine_row.hsn = med.hsn;\n                                    medicine_row.item_name = med.item_name;\n                                    medicine_row.batch = med.batch;\n                                    medicine_row.expiry_date = med.expiry_date;\n                                    medicine_row.mrp = med.mrp;\n                                    medicine_row.qty = med.qty;\n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    // You can add more fields here if needed, for example:\n                                    // medicine_row.dosage = med.dosage;\n                                    // medicine_row.period = med.period;\n                                    // Depending on what fields are available and needed\n                                });\n                                \n                                // Update the form\n                                frm.refresh_field('medicines');\n                                \n                                // Show success message\n                                frappe.show_alert({\n                                    message: `Successfully added ${encounter.custom_medicine_prescription.length} medicine(s) from prescription`,\n                                    indicator: 'green'\n                                }, 5);\n                                \n                                // Set encounter reference if your form has such a field\n                                if (frm.fields_dict.encounter) {\n                                    frm.set_value('encounter', selected);\n                                    frm.refresh_field('encounter');\n                                }\n                            }\n                        });\n                        \n                        d.hide();\n                    }\n                });\n                \n                d.show();\n                \n                // Make dialog slightly wider for better table display\n                d.$wrapper.find('.modal-dialog').css('max-width', '700px');\n                \n                addCheckboxValidation('.enc-radio');\n            } catch (err) {\n                console.error(err);\n                frappe.msgprint(\"Error fetching Patient Encounters.\");\n            }\n        });\n    }\n});\n\n// Checkbox group acts like radio buttons\nfunction addCheckboxValidation(selector) {\n    $(document).on('change', selector, function () {\n        if ($(this).is(':checked')) {\n            $(selector).not(this).prop('checked', false);\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Laboratory Bill",
  "enabled": 1,
  "modified": "2025-05-23 09:43:19.207305",
  "module": "Health Sil",
  "name": "Laboratory Billing from Patient Encounter",
  "script": "frappe.ui.form.on('Laboratory Bill', {\n    refresh(frm) {\n        frm.add_custom_button('Get from Patient Encounter', async () => {\n            if (!frm.doc.patient_name) {\n                frappe.msgprint(__('Please enter Patient name'));\n                return;\n            }\n            try {\n                const result = await frappe.call({\n                    method: \"frappe.client.get_list\",\n                    args: {\n                        doctype: \"Patient Encounter\",\n                        filters: { patient: frm.doc.patient_name },\n                        fields: [\"name\", \"patient\", \"encounter_date\", \"custom_encounter_token\", \"practitioner\", \"modified\", \"title\"],\n                        order_by: \"modified desc\",\n                        limit_page_length: 20\n                    }\n                });\n                const encounters = result.message;\n                if (!encounters.length) {\n                    frappe.msgprint(\"No Patient Encounters found for this patient.\");\n                    return;\n                }\n                \n                // Add custom CSS for the dialog\n                const customStyles = `\n                    <style>\n                        .encounter-table {\n                            border-collapse: separate;\n                            border-spacing: 0;\n                            width: 100%;\n                            border-radius: 8px;\n                            overflow: hidden;\n                            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                        }\n                        \n                        .encounter-table thead {\n                            background: #4172b4;\n                            color: white;\n                        }\n                        \n                        .encounter-table th {\n                            padding: 12px 15px;\n                            font-weight: 600;\n                            text-align: left;\n                            font-size: 13px;\n                        }\n                        \n                        .encounter-table td {\n                            padding: 10px 15px;\n                            border-bottom: 1px solid #e0e0e0;\n                            vertical-align: middle;\n                        }\n                        \n                        .encounter-table tbody tr:last-child td {\n                            border-bottom: none;\n                        }\n                        \n                        .encounter-table tbody tr:nth-child(even) {\n                            background-color: #f7f9fc;\n                        }\n                        \n                        .encounter-table tbody tr:hover {\n                            background-color: #f0f4f9;\n                        }\n                        \n                        .enc-checkbox {\n                            width: 18px;\n                            height: 18px;\n                            cursor: pointer;\n                        }\n                        \n                        .enc-checkbox:checked {\n                            accent-color: #4172b4;\n                        }\n                        \n                        .enc-date {\n                            color: #555;\n                            font-weight: 500;\n                        }\n                        \n                        .enc-token {\n                            font-weight: 600;\n                            color: #4172b4;\n                        }\n                        \n                        .modal-body {\n                            padding: 0 !important;\n                        }\n                        \n                        .table-container {\n                            padding: 15px;\n                            max-height: 400px;\n                            overflow-y: auto;\n                        }\n                    </style>\n                `;\n                \n                // Build a table-style HTML with improved styling\n                let html = `\n                    ${customStyles}\n                    <div class=\"table-container\">\n                        <table class=\"encounter-table\">\n                            <thead>\n                                <tr>\n                                    <th style=\"width: 60px\">Select</th>\n                                    <th>Encounter</th>\n                                    <th>Date</th>\n                                    <th>Token</th>\n                                </tr>\n                            </thead>\n                            <tbody>`;\n                \n                encounters.forEach(enc => {\n                    html += `\n                        <tr>\n                            <td style=\"text-align: center\">\n                                <input type=\"checkbox\" class=\"enc-radio enc-checkbox\" value=\"${enc.name}\"/>\n                            </td>\n                            <td>${enc.title || \"Untitled Encounter\"}</td>\n                            <td class=\"enc-date\">${frappe.datetime.str_to_user(enc.encounter_date)}</td>\n                            <td class=\"enc-token\">${enc.custom_encounter_token || \"-\"}</td>\n                        </tr>`;\n                });\n                \n                html += `</tbody></table></div>`;\n                \n                const d = new frappe.ui.Dialog({\n                    title: \"Select Patient Encounter\",\n                    fields: [\n                        {\n                            fieldname: \"encounter_table\",\n                            fieldtype: \"HTML\",\n                            options: html\n                        }\n                    ],\n                    primary_action_label: \"Get Prescription\",\n                    primary_action() {\n                        const selected = $('input.enc-radio:checked').val();\n                        if (!selected) {\n                            frappe.msgprint(\"Please select an encounter first.\");\n                            return;\n                        }\n                        \n                        // Fetch prescriptions from the selected encounter\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Patient Encounter\",\n                                name: selected\n                            },\n                            callback: function(data) {\n                                if (!data.message) {\n                                    frappe.msgprint(\"Could not fetch the encounter details.\");\n                                    return;\n                                }\n                                \n                                const encounter = data.message;\n                                \n                                // Check if custom_laboratory_tests exists and has items\n                                if (!encounter.custom_laboratory_tests || !encounter.custom_laboratory_tests.length) {\n                                    frappe.msgprint(\"No laboratory tests found in this encounter.\");\n                                    return;\n                                }\n                                \n                                // Clear existing items in the lab test table if needed\n                                frm.doc.lab_items = frm.doc.lab_items || [];\n                                \n                                // Add each prescribed lab test to the lab_items child table\n                                encounter.custom_laboratory_tests.forEach(lab => {\n                                    // Create a new row in the lab_items child table\n                                    const lab_test_row = frappe.model.add_child(frm.doc, \"Lab Items\", \"lab_items\");\n                                    \n                                    // Copy data from prescription to the new row\n                                    lab_test_row.item_code = lab.item_code;\n                                    lab_test_row.item_name = lab.item_name;\n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    // You can add more fields here if needed, for example:\n                                    // lab_test_row.dosage = lab.dosage;\n                                    // lab_test_row.period = lab.period;\n                                    // Depending on what fields are available and needed\n                                });\n                                \n                                // Update the form\n                                frm.refresh_field('lab_items');\n                                \n                                // Show success message\n                                frappe.show_alert({\n                                    message: `Successfully added ${encounter.custom_laboratory_tests.length} lab test(s) from prescription`,\n                                    indicator: 'green'\n                                }, 5);\n                                \n                                // Set encounter reference if your form has such a field\n                                if (frm.fields_dict.encounter) {\n                                    frm.set_value('encounter', selected);\n                                    frm.refresh_field('encounter');\n                                }\n                            }\n                        });\n                        \n                        d.hide();\n                    }\n                });\n                \n                d.show();\n                \n                // Make dialog slightly wider for better table display\n                d.$wrapper.find('.modal-dialog').css('max-width', '700px');\n                \n                addCheckboxValidation('.enc-radio');\n            } catch (err) {\n                console.error(err);\n                frappe.msgprint(\"Error fetching Patient Encounters.\");\n            }\n        });\n    }\n});\n\n// Checkbox group acts like radio buttons\nfunction addCheckboxValidation(selector) {\n    $(document).on('change', selector, function () {\n        if ($(this).is(':checked')) {\n            $(selector).not(this).prop('checked', false);\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure Bill",
  "enabled": 1,
  "modified": "2025-05-23 09:54:00.968271",
  "module": "Health Sil",
  "name": "Clinical Procedure Billing from Patient Encounter",
  "script": "frappe.ui.form.on('Clinical Procedure Bill', {\n    refresh(frm) {\n        frm.add_custom_button('Get from Patient Encounter', async () => {\n            if (!frm.doc.patient_name) {\n                frappe.msgprint(__('Please enter Patient name'));\n                return;\n            }\n            try {\n                const result = await frappe.call({\n                    method: \"frappe.client.get_list\",\n                    args: {\n                        doctype: \"Patient Encounter\",\n                        filters: { patient: frm.doc.patient_name },\n                        fields: [\"name\", \"patient\", \"encounter_date\", \"custom_encounter_token\", \"practitioner\", \"modified\", \"title\"],\n                        order_by: \"modified desc\",\n                        limit_page_length: 20\n                    }\n                });\n                const encounters = result.message;\n                if (!encounters.length) {\n                    frappe.msgprint(\"No Patient Encounters found for this patient.\");\n                    return;\n                }\n                \n                // Add custom CSS for the dialog\n                const customStyles = `\n                    <style>\n                        .encounter-table {\n                            border-collapse: separate;\n                            border-spacing: 0;\n                            width: 100%;\n                            border-radius: 8px;\n                            overflow: hidden;\n                            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                        }\n                        \n                        .encounter-table thead {\n                            background: #4172b4;\n                            color: white;\n                        }\n                        \n                        .encounter-table th {\n                            padding: 12px 15px;\n                            font-weight: 600;\n                            text-align: left;\n                            font-size: 13px;\n                        }\n                        \n                        .encounter-table td {\n                            padding: 10px 15px;\n                            border-bottom: 1px solid #e0e0e0;\n                            vertical-align: middle;\n                        }\n                        \n                        .encounter-table tbody tr:last-child td {\n                            border-bottom: none;\n                        }\n                        \n                        .encounter-table tbody tr:nth-child(even) {\n                            background-color: #f7f9fc;\n                        }\n                        \n                        .encounter-table tbody tr:hover {\n                            background-color: #f0f4f9;\n                        }\n                        \n                        .enc-checkbox {\n                            width: 18px;\n                            height: 18px;\n                            cursor: pointer;\n                        }\n                        \n                        .enc-checkbox:checked {\n                            accent-color: #4172b4;\n                        }\n                        \n                        .enc-date {\n                            color: #555;\n                            font-weight: 500;\n                        }\n                        \n                        .enc-token {\n                            font-weight: 600;\n                            color: #4172b4;\n                        }\n                        \n                        .modal-body {\n                            padding: 0 !important;\n                        }\n                        \n                        .table-container {\n                            padding: 15px;\n                            max-height: 400px;\n                            overflow-y: auto;\n                        }\n                    </style>\n                `;\n                \n                // Build a table-style HTML with improved styling\n                let html = `\n                    ${customStyles}\n                    <div class=\"table-container\">\n                        <table class=\"encounter-table\">\n                            <thead>\n                                <tr>\n                                    <th style=\"width: 60px\">Select</th>\n                                    <th>Encounter</th>\n                                    <th>Date</th>\n                                    <th>Token</th>\n                                </tr>\n                            </thead>\n                            <tbody>`;\n                \n                encounters.forEach(enc => {\n                    html += `\n                        <tr>\n                            <td style=\"text-align: center\">\n                                <input type=\"checkbox\" class=\"enc-radio enc-checkbox\" value=\"${enc.name}\"/>\n                            </td>\n                            <td>${enc.title || \"Untitled Encounter\"}</td>\n                            <td class=\"enc-date\">${frappe.datetime.str_to_user(enc.encounter_date)}</td>\n                            <td class=\"enc-token\">${enc.custom_encounter_token || \"-\"}</td>\n                        </tr>`;\n                });\n                \n                html += `</tbody></table></div>`;\n                \n                const d = new frappe.ui.Dialog({\n                    title: \"Select Patient Encounter\",\n                    fields: [\n                        {\n                            fieldname: \"encounter_table\",\n                            fieldtype: \"HTML\",\n                            options: html\n                        }\n                    ],\n                    primary_action_label: \"Get Prescription\",\n                    primary_action() {\n                        const selected = $('input.enc-radio:checked').val();\n                        if (!selected) {\n                            frappe.msgprint(\"Please select an encounter first.\");\n                            return;\n                        }\n                        \n                        // Fetch prescriptions from the selected encounter\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Patient Encounter\",\n                                name: selected\n                            },\n                            callback: function(data) {\n                                if (!data.message) {\n                                    frappe.msgprint(\"Could not fetch the encounter details.\");\n                                    return;\n                                }\n                                \n                                const encounter = data.message;\n                                \n                                // Check if custom_medical_procedures exists and has items\n                                if (!encounter.custom_medical_procedures || !encounter.custom_medical_procedures.length) {\n                                    frappe.msgprint(\"No clinical procedures found in this encounter.\");\n                                    return;\n                                }\n                                \n                                // Clear existing items in the nursing_items table if needed\n                                frm.doc.nursing_items = frm.doc.nursing_items || [];\n                                \n                                // Add each prescribed medicine to the nursing_items child table\n                                encounter.custom_medical_procedures.forEach(clinic => {\n                                    // Create a new row in the nursing_items child table\n                                    const clinic_row = frappe.model.add_child(frm.doc, \"Nursing Items\", \"nursing_items\");\n                                    \n                                    // Copy data from prescription to the new row\n                                    clinic_row.item_code = clinic.item_code;\n                                    clinic_row.item_name = clinic.item_name;\n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    // You can add more fields here if needed, for example:\n                                    // clinic_row.dosage = clinic.dosage;\n                                    // clinic_row.period = clinic.period;\n                                    // Depending on what fields are available and needed\n                                });\n                                \n                                // Update the form\n                                frm.refresh_field('nursing_items');\n                                \n                                // Show success message\n                                frappe.show_alert({\n                                    message: `Successfully added ${encounter.custom_medical_procedures.length} clinical procedure(s) from prescription`,\n                                    indicator: 'green'\n                                }, 5);\n                                \n                                // Set encounter reference if your form has such a field\n                                if (frm.fields_dict.encounter) {\n                                    frm.set_value('encounter', selected);\n                                    frm.refresh_field('encounter');\n                                }\n                            }\n                        });\n                        \n                        d.hide();\n                    }\n                });\n                \n                d.show();\n                \n                // Make dialog slightly wider for better table display\n                d.$wrapper.find('.modal-dialog').css('max-width', '700px');\n                \n                addCheckboxValidation('.enc-radio');\n            } catch (err) {\n                console.error(err);\n                frappe.msgprint(\"Error fetching Patient Encounters.\");\n            }\n        });\n    }\n});\n\n// Checkbox group acts like radio buttons\nfunction addCheckboxValidation(selector) {\n    $(document).on('change', selector, function () {\n        if ($(this).is(':checked')) {\n            $(selector).not(this).prop('checked', false);\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Laboratory Bill",
  "enabled": 0,
  "modified": "2025-06-03 10:56:32.339923",
  "module": "",
  "name": "lab bill test",
  "script": "frappe.ui.form.on('Laboratory Bill', {\n    patient_name: function(frm) {\n        if (!frm.doc.patient_name) return;\n\n        frm.doc.lab_items.forEach(row => {\n            if (!row.item_code) return;\n\n            frappe.call({\n                method: \"health_sil.services.price_list_api.get_country_specific_price\",\n                args: {\n                    item_code: row.item_code,\n                    patient_id: frm.doc.patient_name\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frappe.model.set_value(row.doctype, row.name, \"rate\", r.message);\n                        if (row.qty) {\n                            frappe.model.set_value(row.doctype, row.name, \"amount\", row.qty * r.message);\n                            frappe.model.set_value(row.doctype, row.name, \"amount_before_discount\", row.qty * r.message);\n                        }\n                        calculate_totals(frm);\n                    }\n                }\n            });\n        });\n\n        frappe.db.get_value('Patient', frm.doc.patient_name, 'default_price_list')\n            .then(res => {\n                if (res.message?.default_price_list) {\n                    frm.set_value(\"custom_patient_price_list\", res.message.default_price_list);\n                }\n            });\n\n        frappe.call({\n            method: 'health_sil.services.appointment_api.check_last_encounter',\n            args: { patient: frm.doc.patient_name },\n            callback: function(r) {\n                if (r.message?.has_encounter) {\n                    frm.set_value('healthcare_practitioner', r.message.doctor);\n                }\n            }\n        });\n    },\n\n    on_submit: function(frm) {\n        const items = (frm.doc.lab_items || []).map(row => ({\n            item_code: row.item_code,\n            item_name: row.item_name,\n            qty: row.qty,\n            rate: row.rate,\n            amount: row.amount,\n            amount_before_discount: row.amount_before_discount\n        }));\n\n        frappe.call({\n            method: 'health_sil.services.generate_invoice_api.create_sales_invoice',\n            args: {\n                patient: frm.doc.name,\n                patient_name: frm.doc.patient_name,\n                doctor: frm.doc.healthcare_practitioner,\n                mode_of_payment: frm.doc.custom_mode_of_payment,\n                items: items,\n                price_list: frm.doc.custom_patient_price_list\n            },\n            callback: function(r) {\n                if (r.message) {\n                    frappe.msgprint({\n                        title: __('Invoice & Payment Created'),\n                        message: __('Sales Invoice {0} and Payment Entry generated successfully.', [r.message.name]),\n                        indicator: 'green'\n                    });\n                    frappe.set_route('print', 'Laboratory Bill', frm.doc.name);\n                }\n            }\n        });\n    },\n\n    refresh: function(frm) {\n        if (!window.labTestRealtimeBound) {\n            frappe.realtime.on('lab_test_created', function(data) {\n                if (data?.bill_name === frm.doc.name) {\n                    frappe.show_alert({\n                        message: `Lab Test result submitted for <b>${data.item_code}</b>. <a style=\"color:#007bff; cursor:pointer;\" onclick=\"location.reload()\">Click to refresh</a>.`,\n                        indicator: 'green'\n                    }, 15);\n                }\n            });\n            window.labTestRealtimeBound = true;\n        }\n\n        if (frm.doc.docstatus === 1) {\n            frm.add_custom_button(\"Enter Results\", () => {\n                show_lab_tests_dialog(frm);\n            });\n        }\n\n        if (frm.doc.docstatus === 0) {\n            $('button[data-original-title=\"Print\"]').hide();\n        }\n\n        frm.fields_dict.lab_items.grid.get_field(\"item_code\").get_query = () => ({ filters: { \"item_group\": \"Laboratory\" } });\n        frm.fields_dict.lab_items.grid.get_field(\"item_name\").get_query = () => ({ filters: { \"item_group\": \"Laboratory\" } });\n    },\n\n    validate: function(frm) {\n        const required_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        const missing = required_fields.filter(field => !frm.doc[field]);\n\n        const incomplete_row = frm.doc.lab_items?.find(row =>\n            !row.item_code || !row.rate || !row.amount_before_discount\n        );\n\n        if (incomplete_row) {\n            frappe.msgprint(__(\"Please complete all required Lab Item fields.\"));\n            frappe.validated = false;\n            return;\n        }\n\n        if (missing.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please complete:\") + \"<br><b>\" +\n                    missing.map(f => __(frappe.meta.get_label(frm.doctype, f, frm.doc.name))).join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n    },\n\n    custom_discount_mode: calculate_totals,\n    custom_amount_of_discount: function(frm) {\n        if (frm.doc.custom_discount_mode === \"Cash\") calculate_totals(frm);\n    },\n    custom_percentage_of_discount: function(frm) {\n        if (frm.doc.custom_discount_mode === \"Percentage\") calculate_totals(frm);\n    }\n});\n\nfrappe.ui.form.on('Lab Items', {\n    lab_items_add: calculate_totals,\n    lab_items_remove: calculate_totals,\n\n    item_code: function(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        const is_duplicate = frm.doc.lab_items?.some(item => item.item_code === row.item_code && item.name !== row.name);\n        if (is_duplicate) {\n            frappe.msgprint(__('This item is already added.'));\n            frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n            frappe.model.set_value(cdt, cdn, \"item_name\", \"\");\n            return;\n        }\n\n        if (!row.item_code) return;\n\n        frappe.db.get_value(\"Item\", { item_code: row.item_code }, [\"item_name\", \"valuation_rate\", \"item_group\"])\n            .then(r => {\n                if (!r.message) return;\n                frappe.model.set_value(cdt, cdn, \"item_name\", r.message.item_name);\n                frappe.model.set_value(cdt, cdn, \"qty\", 1);\n\n                const group = r.message.item_group;\n                if (frm.doc.patient_name && group !== \"Medications\") {\n                    frappe.call({\n                        method: \"health_sil.services.price_list_api.get_country_specific_price\",\n                        args: { item_code: row.item_code, patient_id: frm.doc.patient_name },\n                        callback: function(res) {\n                            const rate = res.message || 0;\n                            [\"rate\", \"amount\", \"amount_before_discount\"].forEach(f => frappe.model.set_value(cdt, cdn, f, rate));\n                            frm.refresh_field(\"lab_items\");\n                            calculate_totals(frm);\n                        }\n                    });\n                } else {\n                    const rate = r.message.valuation_rate || 0;\n                    [\"rate\", \"amount\", \"amount_before_discount\"].forEach(f => frappe.model.set_value(cdt, cdn, f, rate));\n                    frm.refresh_field(\"lab_items\");\n                    calculate_totals(frm);\n                }\n            });\n    }\n});\n\nfunction calculate_totals(frm) {\n    let total_qty = 0, total_amt = 0;\n    (frm.doc.lab_items || []).forEach(row => {\n        total_qty += row.qty || 0;\n        total_amt += row.amount_before_discount || 0;\n    });\n\n    let discount = 0;\n    if (frm.doc.custom_discount_mode === \"Cash\") discount = frm.doc.custom_amount_of_discount || 0;\n    if (frm.doc.custom_discount_mode === \"Percentage\") discount = (total_amt * (frm.doc.custom_percentage_of_discount || 0)) / 100;\n\n    const final = total_amt - discount;\n    const rounded = Math.round(final);\n\n    frm.set_value(\"total_quantity\", total_qty);\n    frm.set_value(\"total_amount\", final);\n    frm.set_value(\"rounded_total_amount\", rounded);\n    frm.set_value(\"saved_amount\", discount);\n    frm.set_value(\"total_items\", frm.doc.lab_items.length);\n\n    frappe.call({\n        method: \"health_sil.services.money_in_words_api.money_in_words_api\",\n        args: { amount: rounded },\n        callback: function(r) {\n            if (r.message) frm.set_value(\"amount_in_words\", r.message);\n        }\n    });\n\n    frm.refresh_fields([\n        \"total_quantity\", \"total_amount\", \"rounded_total_amount\",\n        \"saved_amount\", \"total_items\"\n    ]);\n}\n\n// Global variable to store the current dialog reference\nlet currentLabTestDialog = null;\n\nfunction show_lab_tests_dialog(frm) {\n    frappe.call({\n        method: \"health_sil.services.lab_test_api.get_lab_tests_by_bill\",\n        args: { lab_bill: frm.doc.name },\n        callback: function(r) {\n            const tests = r.message || [];\n            let html = `<div id=\"lab-tests-container\">\n                <table class=\"table table-bordered\">\n                    <thead>\n                        <tr>\n                            <th>Test</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>`;\n            \n            tests.forEach((test, index) => {\n                let actionBtn = '';\n                if (!test.name) {\n                    actionBtn = `<button class=\"btn btn-primary\" onclick=\"frappe.throw('No Lab Test Found')\">Add Result</button>`;\n                } else if (test.docstatus === 1) {\n                    actionBtn = `<span class=\"text-success\">${test.name}</span>\n                        <button class=\"btn btn-secondary ml-2\" onclick=\"window.open('/printview?doctype=Lab Test&name=${test.name}&trigger_print=1')\">Print</button>`;\n                } else {\n                    actionBtn = `<button class=\"btn btn-warning enter-result-btn\" data-test-id=\"${test.name}\" data-template=\"${test.template}\" data-index=\"${index}\">Enter Result</button>`;\n                }\n                html += `<tr id=\"test-row-${index}\">\n                    <td>${test.template}</td>\n                    <td id=\"action-cell-${index}\">${actionBtn}</td>\n                </tr>`;\n            });\n            \n            html += `</tbody></table></div>`;\n\n            currentLabTestDialog = new frappe.ui.Dialog({\n                title: 'Lab Tests for This Bill',\n                fields: [{ fieldtype: 'HTML', fieldname: 'lab_test_table', options: html }]\n            });\n\n            currentLabTestDialog.show();\n\n            // Bind click events\n            setTimeout(() => {\n                currentLabTestDialog.$wrapper.find('.enter-result-btn').off('click').on('click', function () {\n                    const lab_test_id = $(this).data('test-id');\n                    const template = $(this).data('template');\n                    const index = $(this).data('index');\n                    open_result_dialog(lab_test_id, template, index, frm);\n                });\n            }, 300);\n        }\n    });\n}\n\nfunction open_result_dialog(lab_test_id, template, rowIndex, frm) {\n    frappe.call({\n        method: \"health_sil.services.lab_test_api.get_lab_test_result_fields\",\n        args: { lab_test_id },\n        callback: function(r) {\n            let html = `<table class=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th>Test</th>\n                        <th>Result</th>\n                        <th>UOM</th>\n                        <th>Normal Range</th>\n                    </tr>\n                </thead>\n                <tbody>`;\n            \n            r.message.rows.forEach(row => {\n                html += `<tr>\n                    <td>${row.lab_test_name}</td>\n                    <td><input class=\"form-control\" name=\"result_value_${row.name}\" /></td>\n                    <td>${row.uom}</td>\n                    <td>${row.normal_range}</td>\n                </tr>`;\n            });\n            html += `</tbody></table>`;\n\n            const resultDialog = new frappe.ui.Dialog({\n                title: `Enter Results - ${template}`,\n                fields: [{ fieldtype: \"HTML\", fieldname: \"results_table\", options: html }],\n                primary_action_label: \"Submit Results\",\n                primary_action: () => {\n                    const results = {};\n                    r.message.rows.forEach(row => {\n                        const value = resultDialog.$wrapper.find(`[name=result_value_${row.name}]`).val();\n                        if (!value || value.trim() === '') {\n                            frappe.throw(`Please enter result for ${row.lab_test_name}`);\n                            return;\n                        }\n                        results[row.name] = value;\n                    });\n\n                    const confirmDialog = new frappe.ui.Dialog({\n                        title: \"Confirm Submission\",\n                        fields: [{ \n                            fieldtype: \"HTML\", \n                            options: \"<p><strong>Are you sure you want to submit these results?</strong></p><p style='color: #d73e48;'>This action cannot be undone.</p>\" \n                        }],\n                        primary_action_label: \"Yes, Submit\",\n                        primary_action: () => {\n                            // Show loading state by updating button text directly\n                            const primaryBtn = confirmDialog.$wrapper.find('.btn-primary');\n                            const originalText = primaryBtn.text();\n                            primaryBtn.prop('disabled', true).html('<i class=\"fa fa-spinner fa-spin\"></i> Submitting...');\n                            \n                            frappe.call({\n                                method: \"health_sil.services.lab_test_api.submit_lab_test_with_results\",\n                                args: {\n                                    lab_test_id: r.message.lab_test_id,\n                                    results\n                                },\n                                callback: function(response) {\n                                    if (response.message) {\n                                        frappe.msgprint({\n                                            title: \"Success\",\n                                            message: \"Results submitted successfully!\",\n                                            indicator: \"green\"\n                                        });\n                                        \n                                        // Close dialogs\n                                        confirmDialog.hide();\n                                        resultDialog.hide();\n                                        \n                                        // ✅ UPDATE DOM WITHOUT REFRESH\n                                        update_test_row_ui(lab_test_id, template, rowIndex, response.message);\n                                        \n                                    } else {\n                                        frappe.msgprint({\n                                            title: \"Error\",\n                                            message: \"Failed to submit results. Please try again.\",\n                                            indicator: \"red\"\n                                        });\n                                        // Reset button state\n                                        primaryBtn.prop('disabled', false).text(originalText);\n                                    }\n                                },\n                                error: function() {\n                                    frappe.msgprint({\n                                        title: \"Error\",\n                                        message: \"An error occurred. Please try again.\",\n                                        indicator: \"red\"\n                                    });\n                                    // Reset button state\n                                    primaryBtn.prop('disabled', false).text(originalText);\n                                }\n                            });\n                        },\n                        secondary_action_label: \"Cancel\",\n                        secondary_action: () => {\n                            confirmDialog.hide();\n                            resultDialog.show();\n                        }\n                    });\n\n                    resultDialog.hide();\n                    confirmDialog.show();\n                }\n            });\n\n            resultDialog.show();\n        }\n    });\n}\n\n// ✅ FUNCTION TO UPDATE UI WITHOUT REFRESH\nfunction update_test_row_ui(lab_test_id, template, rowIndex, response_data) {\n    if (!currentLabTestDialog || !currentLabTestDialog.$wrapper) {\n        console.log(\"Dialog not found, cannot update UI\");\n        return;\n    }\n    \n    // Find the specific row and action cell\n    const actionCell = currentLabTestDialog.$wrapper.find(`#action-cell-${rowIndex}`);\n    \n    if (actionCell.length === 0) {\n        console.log(`Action cell not found for row ${rowIndex}`);\n        return;\n    }\n    \n    // Get the lab test name from response or use the lab_test_id\n    const lab_test_name = response_data.name || response_data.lab_test_name || lab_test_id;\n    \n    // Create new HTML for submitted status\n    const newActionHtml = `\n        <span class=\"text-success\" style=\"font-weight: bold;\">\n            <i class=\"fa fa-check-circle\"></i> ${lab_test_name}\n        </span>\n        <button class=\"btn btn-secondary btn-sm ml-2\" \n                onclick=\"window.open('/printview?doctype=Lab Test&name=${lab_test_name}&trigger_print=1')\"\n                title=\"Print Lab Test\">\n            <i class=\"fa fa-print\"></i> Print\n        </button>\n    `;\n    \n    // Update the DOM\n    actionCell.html(newActionHtml);\n    \n    // Add a subtle animation to highlight the change\n    actionCell.css({\n        'background-color': '#d4edda',\n        'transition': 'background-color 0.5s ease'\n    });\n    \n    // Remove the highlight after 2 seconds\n    setTimeout(() => {\n        actionCell.css('background-color', '');\n    }, 2000);\n    \n    // Optional: Show a toast notification\n    frappe.show_alert({\n        message: `<strong>${template}</strong> results submitted successfully!`,\n        indicator: 'green'\n    }, 5);\n    \n    console.log(`Successfully updated UI for test ${lab_test_id} in row ${rowIndex}`);\n}",
  "view": "Form"
 }
]