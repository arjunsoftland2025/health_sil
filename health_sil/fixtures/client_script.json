[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 0,
  "modified": "2025-04-08 16:34:40.145000",
  "module": "Health Sil",
  "name": "Patient Fields Validations",
  "script": "frappe.ui.form.on('Patient', {\n    mobile: function(frm) {\n        if (!frm.doc.mobile) return;\n\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Patient',\n                filters: { 'mobile': frm.doc.mobile },\n                fields: ['name', 'patient_name', 'mobile', 'uid']\n            },\n            callback: function(response) {\n                if (response.message.length > 0) {\n                    let table_html = `\n                        <div class=\"panel panel-default\" style=\"max-width: 800px; margin: auto;\">\n                          <div class=\"panel-body\">\n                            <div class=\"table-responsive\">\n                              <table class=\"table table-bordered table-striped table-hover\">\n                                  <thead style=\"background-color:#f8f9fa;\">\n                                      <tr>\n                                          <th>UID</th>\n                                          <th>Patient Name</th>\n                                          <th>Mobile</th>\n                                      </tr>\n                                  </thead>\n                                  <tbody>\n                    `;\n\n                    // Sort by UID in ascending order for improved readability\n                    response.message.sort((a, b) => a.uid - b.uid).forEach(patient => {\n                        table_html += `\n                              <tr>\n                                  <td>${patient.uid}</td>\n                                  <td><a href=\"/app/patient/${patient.name}\" style=\"color:#007bff; text-decoration:underline;\">${patient.patient_name}</a></td>\n                                  <td>${patient.mobile}</td>\n                              </tr>\n                        `;\n                    });\n\n                    table_html += `\n                                  </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                    `;\n\n                    // Display the panel in a message print\n                    frappe.msgprint({\n                        title: __('Duplicate Patients List'),\n                        message: table_html,\n                        indicator: 'red'\n                    });\n                }\n            }\n        });\n    },\n        refresh: function(frm) {\n        // if (frm.doc.custom_free_consultation_period) {\n        //     calculate_valid_till(frm);\n        // }\n        let consultation_valid_date = frm.doc.custom_consultation_valid_date;\n        console.log(consultation_valid_date);\n        let validTillDate = new Date(consultation_valid_date);\n        if (consultation_valid_date){\n            // Format the valid till date for display\n            let formattedDate = validTillDate.toLocaleDateString('en-US', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n            });\n            \n            // Set the hidden field value in \"YYYY-MM-DD\" format\n            let formattedHiddenDate = validTillDate.toISOString().split('T')[0];\n            frm.set_value('custom_consultation_valid_date', formattedHiddenDate);\n            frm.refresh_field('custom_consultation_valid_date');\n            \n            // Compare the valid till date with the form open date (current date)\n            let currentDate = new Date();\n            if (validTillDate < currentDate) {\n                // If expired, display the message in red\n                frm.fields_dict.custom_valid_till.$wrapper.html(\n                    `<span style=\"color:red;\">Consultation Expired on: ${formattedDate}</span>`\n                );\n                // Show an alert on the bottom right that the consultation has expired\n                frappe.show_alert({\n                    message: `Consultation expired on: ${formattedDate}`,\n                    indicator: 'red'\n                }, 5);\n            } else {\n                // Otherwise, display normally\n                frm.fields_dict.custom_valid_till.$wrapper.html(\n                    `Consultation Valid Till: ${formattedDate}`\n                );\n            }\n            frm.refresh_field('custom_valid_till');\n        } else {\n            // Clear fields if no consultation period is provided\n            frm.set_value('custom_consultation_valid_date', null);\n            frm.refresh_field('custom_consultation_valid_date');\n            frm.fields_dict.custom_valid_till.$wrapper.html(\"\");\n            frm.refresh_field('custom_valid_till');\n        }\n    }\n});\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2025-04-16 11:33:19.831102",
  "module": "Health Sil",
  "name": "Registration Invoice Button",
  "script": "frappe.ui.form.on('Patient', {\n    \n    on_load: function(frm) {\n        // Clear the cache and refresh\n        frappe.clear_cache();\n        frm.refresh();\n        console.log(\"Cache cleared and form refreshed on load\");\n    },\n    \n    mobile: function(frm) {\n        if (!frm.doc.mobile) return;\n\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Patient',\n                filters: { 'mobile': frm.doc.mobile },\n                fields: ['name', 'patient_name', 'mobile', 'uid']\n            },\n            callback: function(response) {\n                if (response.message.length > 0) {\n                    let table_html = `\n                        <div class=\"panel panel-default\" style=\"max-width: 800px; margin: auto;\">\n                          <div class=\"panel-body\">\n                            <div class=\"table-responsive\">\n                              <table class=\"table table-bordered table-striped table-hover\">\n                                  <thead style=\"background-color:#f8f9fa;\">\n                                      <tr>\n                                          <th>UID</th>\n                                          <th>Patient Name</th>\n                                          <th>Mobile</th>\n                                      </tr>\n                                  </thead>\n                                  <tbody>\n                    `;\n\n                    // Sort by UID in ascending order for improved readability\n                    response.message.sort((a, b) => a.uid - b.uid).forEach(patient => {\n                        table_html += `\n                              <tr>\n                                  <td>${patient.uid}</td>\n                                  <td><a href=\"/app/patient/${patient.name}\" style=\"color:#007bff; text-decoration:underline;\">${patient.patient_name}</a></td>\n                                  <td>${patient.mobile}</td>\n                              </tr>\n                        `;\n                    });\n\n                    table_html += `\n                                  </tbody>\n                              </table>\n                            </div>\n                          </div>\n                        </div>\n                    `;\n\n                    // Display the panel in a message print\n                    frappe.msgprint({\n                        title: __('Duplicate Patients List'),\n                        message: table_html,\n                        indicator: 'red'\n                    });\n                }\n            }\n        });\n    },\n\n    after_save: function(frm) {\n        // Show invoice dialog only once after initial save\n        // This ensures it's shown only after the first save of a new patient\n        if (frm.doc.__islocal) {\n            // We use setTimeout to ensure this runs after the save is complete\n            // and the __islocal flag is updated\n            setTimeout(() => {\n                if (!frm.doc.custom_is_registered) {\n                    frappe.clear_cache();\n                    console.log(\"Cache cleared after save\");\n                    generateInvoiceHandler(frm);\n                }\n            }, 200);\n        }\n    },\n\n    refresh: function(frm) {\n        console.log(\"Patient form refresh function executing\");\n        frm.dialog_shown_in_current_session = false;\n        \n        console.log(\"refreshing.....\");\n        \n        $('button:contains(\"Invoice Patient Registration\")').each(function() {\n                if ($(this).text().trim() === \"Invoice Patient Registration\") {\n                    $(this).hide();\n                }\n        });\n        \n        $('button:contains(\"ABDM\")').each(function() {\n                if ($(this).text().trim() === \"ABDM\") {\n                    $(this).hide();\n                }\n        });\n        \n        // Add the Generate Invoice button - this part is separate from the above logic\n        if (!frm.is_new()) {\n            console.log(\"Adding Generate Invoice button\");\n            \n            // Add the button once (it's re-added on each refresh by Frappe anyway)\n            frm.add_custom_button('Generate Invoice', function() {\n                frm.refresh();\n                console.log(\"Cache cleared custom button\");\n                generateInvoiceHandler(frm);\n            });\n            \n            // Only auto-open the dialog for non-registered patients on form load\n            // and only if a dialog isn't already showing\n            if (!frm.doc.custom_is_registered && !frm.dialog_shown_in_current_session) {\n                // Set this flag to prevent multiple dialogs in one session\n                frm.dialog_shown_in_current_session = true;\n                \n                // Use a slight delay to ensure the UI is fully loaded\n                setTimeout(() => {\n                    // Check again to make sure no other process has shown the dialog\n                    if (!window.current_patient_dialog_active) {\n                        generateInvoiceHandler(frm);\n                    }\n                }, 300);\n            }\n        }\n    }\n}); \n\n// Define generateInvoiceHandler function at the global scope\nfunction generateInvoiceHandler(frm) {\n    // Prevent multiple dialogs from being shown simultaneously\n    if (window.current_patient_dialog_active) {\n        console.log(\"Dialog already active, not showing another one\");\n        return;\n    }\n    \n    // Set global flag that we're showing a dialog\n    window.current_patient_dialog_active = true;\n    \n    let patient_territory = frm.doc.territory;\n    let is_registered = frm.doc.custom_is_registered;\n    let registration_fee = 0;\n    let today = new Date(frappe.datetime.get_today());\n    \n    \n\n    let dialog = new frappe.ui.Dialog({\n        title: 'Generate Invoice',\n        fields: [\n            { fieldtype: 'Section Break', label: 'Patient Details' },\n            { fieldtype: 'Data', fieldname: 'patient_name', label: 'Patient Name', default: frm.doc.patient_name, read_only: 1 },\n            { fieldtype: 'Column Break' },\n            { fieldtype: 'Data', fieldname: 'registration_period', label: 'Registration Period', default: frm.doc.custom_registration_period, read_only: 1 },\n\n            { fieldtype: 'Section Break', label: 'Invoice Details' },\n            {\n                fieldtype: 'Link',\n                fieldname: 'doctor_name',\n                label: 'Doctor Name',\n                reqd: 1, // Makes this field mandatory\n                options: 'Healthcare Practitioner',\n                change: function() {\n                    let doctor = dialog.get_value('doctor_name');\n                    if (doctor) {\n                        // Check if consultation is valid for this doctor\n                        checkConsultationValidity(frm, doctor, dialog);\n                        \n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Healthcare Practitioner',\n                                name: doctor\n                            },\n                            callback: function(r) {\n                                if (r.message) {\n                                    \n                                    // logic here\n                                    console.log(\"patient\",patient_territory);\n                                    \n                                    let consultation_territory_find = r.message.custom_consultation_fee_structure.find(c => c.consultation_territory === patient_territory);\n                                    \n                                    let consultation_territory_amt = consultation_territory_find ? consultation_territory_find.consultation_fee : null;\n                                    \n                                    // console.log(\"consult\", consultation_amt12);\n                                    \n                                    let consultation_fee = parseFloat(consultation_territory_amt || 0);\n                                    dialog.set_value('consultation_charge', consultation_fee);\n                                    updateTable(dialog, parseFloat(dialog.registration_fee || 0), consultation_fee, is_registered, frm, doctor);\n                                }\n                            }\n                        });\n\n                        frappe.call({\n                            method: 'health_sil.services.appointment_api.manage_token',\n                            args: { practitioner_name: doctor },\n                            callback: function(r) {\n                                if (r.message) {\n                                    cached_token = r.message;\n                                    dialog.set_value('token_number', r.message);\n                                }\n                            }\n                        });\n                    }\n                }\n            },\n            { fieldtype: 'Data', fieldname: 'consultation_charge', label: 'Consultation Charge', read_only: 1 },\n            { fieldtype: 'HTML', fieldname: 'consultation_validity_info', label: 'Consultation Validity' },\n            { fieldtype: 'Column Break' },\n            { fieldtype: 'Data', fieldname: 'token_number', label: 'Token Number' },\n            { fieldtype: 'Link', fieldname: 'mode_of_payment', label: 'Mode of Payment', options: 'Mode of Payment', default: \"Cash\", reqd: 1 },\n\n            { fieldtype: 'Section Break'},\n            { fieldtype: 'HTML', fieldname: 'items_table' }\n        ],\n        \n        primary_action_label: \"Generate Bill\",\n        primary_action: function(values) {\n            frappe.confirm(\n                __('Are you sure you want to generate this bill?'),\n                function() { // If confirmed\n                    let generate_btn = dialog.get_primary_btn();\n                    generate_btn.prop('disabled', true); // Disable button\n                    generate_btn.html(`<i class=\"fa fa-spinner fa-spin\"></i> Generating...`); // Show loading indicator\n\n                    let reg_fee = parseFloat(dialog.registration_fee || 0);\n                    let consult_fee = parseFloat(values.consultation_charge || 0);\n                    let items = [];\n\n                    if (!is_registered && reg_fee > 0) {\n                        items.push({\n                            item_code: \"Registration Fee\",\n                            qty: 1,\n                            rate: reg_fee\n                        });\n                    }\n                    if (consult_fee > 0 && !dialog.consultation_valid) {\n                        items.push({\n                            item_code: \"Consultation Fee\",\n                            qty: 1,\n                            rate: consult_fee\n                        });\n                    }\n\n                    if (items.length === 0) {\n                        frappe.msgprint(__('Please select at least one service before generating an invoice'), 'Warning');\n                        generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                        return;\n                    }\n                    \n                    console.log(\"token\", values.token_number);\n                    \n                    // add token to token history\n                    if(values.token_number){\n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Healthcare Practitioner',\n                                name: values.doctor_name\n                            },\n                            callback: function(r) {\n                                if (r.message) {\n                                    let doctor_doc = r.message;\n                                    let today = frappe.datetime.get_today();\n                                    let token_series = cached_token.split('-')[0];\n                                    let last_token = parseInt(cached_token.split('-')[1]);\n        \n                                    doctor_doc.custom_token_history = doctor_doc.custom_token_history || [];\n        \n                                    // Check if today's entry exists\n                                    let today_entry = doctor_doc.custom_token_history.find(entry => entry.date === today);\n        \n                                    if (today_entry) {\n                                        // Update the existing token\n                                        today_entry.last_token = last_token;\n                                    } else {\n                                        // Add new token entry\n                                        doctor_doc.custom_token_history.push({\n                                            token_series: token_series,\n                                            last_token: last_token,\n                                            date: today\n                                        });\n                                    }\n        \n                                    frappe.call({\n                                        method: 'frappe.client.save',\n                                        args: {\n                                            doc: doctor_doc\n                                        },\n                                        callback: function() {\n                                            frappe.msgprint(`Token Generated: <b>${cached_token}</b>`, __(\"Success\"));\n                                        }\n                                    });\n                                } else {\n                                    frappe.msgprint(\"Doctor not found.\");\n                                }\n                            }\n                        });\n                    }\n                    \n                    // // Call to update patient's consultation validity\n                    // if (!dialog.consultation_valid) {\n                    //     updateConsultationValidity(frm, values.doctor_name);\n                    // }\n                    \n                    // generate the invoice\n                    frappe.call({\n                        method: 'health_sil.services.generate_bill_api.create_sales_invoice',\n                        args: {\n                            patient: frm.doc.name,\n                            patient_name: frm.doc.patient_name,\n                            doctor: values.doctor_name,\n                            mode_of_payment: values.mode_of_payment,\n                            items: items,\n                            encounter_token: values.token_number\n                        },\n                        callback: function(r) {\n                            if (r.message) {\n                                \n                                // Call to update patient's consultation validity\n                                if (!dialog.consultation_valid) {\n                                    updateConsultationValidity(frm, values.doctor_name);\n                                }\n                                \n                                frappe.msgprint({\n                                    title: __('Invoice & Payment Created'),\n                                    message: __('Sales Invoice {0} and Payment Entry {1} generated successfully.', \n                                        [r.message.sales_invoice, r.message.payment_entry]),\n                                    indicator: 'green'\n                                });\n                                dialog.hide();\n                                \n                                frappe.set_route('print', 'Sales Invoice', r.message.sales_invoice);\n                            }\n                            generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                        }\n                    });\n                },\n                function() { // If canceled\n                    console.log(\"Bill generation canceled.\");\n                }\n            );\n        },\n        secondary_action_label: \"Generate Token\",\n        secondary_action: function(values) {\n            frappe.confirm(\n                __('Are you sure you want to generate the token?'),\n                function () {\n                    let doctor = dialog.get_value('doctor_name');\n                    if (!doctor) {\n                        frappe.msgprint(\"Please select a doctor.\");\n                        return;\n                    }\n                    \n                    frappe.call({\n                        method: \"health_sil.services.generate_bill_api.create_patient_encounter\",\n                        args: {\n                            patient: frm.doc.name,\n                            doctor: doctor,\n                            company: frappe.defaults.get_user_default(\"Company\"), // Ensure company is passed\n                            encounter_token: cached_token // Token value if available\n                        },\n                        callback: function(r) {\n                            if (r.message) {\n                                frappe.msgprint({\n                                    message: `Patient Encounter Created</a>`,\n                                    title: \"Success\",\n                                    indicator: \"blue\",\n                                    alert: true\n                                });\n                                frappe.call({\n                                    method: 'frappe.client.get',\n                                    args: {\n                                        doctype: 'Healthcare Practitioner',\n                                        name: doctor\n                                    },\n                                    callback: function(r) {\n                                        if (r.message) {\n                                            let doctor_doc = r.message;\n                                            let today = frappe.datetime.get_today();\n                                            let token_series = cached_token.split('-')[0];\n                                            let last_token = parseInt(cached_token.split('-')[1]);\n                    \n                                            doctor_doc.custom_token_history = doctor_doc.custom_token_history || [];\n                    \n                                            // Check if today's entry exists\n                                            let today_entry = doctor_doc.custom_token_history.find(entry => entry.date === today);\n                    \n                                            if (today_entry) {\n                                                // Update the existing token\n                                                today_entry.last_token = last_token;\n                                            } else {\n                                                // Add new token entry\n                                                doctor_doc.custom_token_history.push({\n                                                    token_series: token_series,\n                                                    last_token: last_token,\n                                                    date: today\n                                                });\n                                            }\n                    \n                                            frappe.call({\n                                                method: 'frappe.client.save',\n                                                args: {\n                                                    doc: doctor_doc\n                                                },\n                                                callback: function() {\n                                                    frappe.msgprint({\n                                                        message: `Token Generated: ${cached_token}`,\n                                                        title: \"Success\",\n                                                        indicator: \"green\",\n                                                        alert: true\n                                                   });\n                                                }\n                                            });\n                                        } else {\n                                            frappe.msgprint(\"Doctor not found.\");\n                                        }\n                                    }\n                                });\n                            } else {\n                                frappe.msgprint(\"No encounter created.\");\n                            }\n                        }\n                    });\n                    dialog.hide();\n                },\n                function () {\n                    console.log(\"Token generation canceled.\");\n                }\n            );\n        },\n        onhide: function() {\n            // Reset the global dialog active flag when dialog is closed\n            window.current_patient_dialog_active = false;\n        }\n    });\n    \n    dialog.get_primary_btn().hide();\n    dialog.get_secondary_btn().hide();\n    \n    let cached_token = null;\n    let patient = frm.doc.name;\n    \n    if (patient) {\n        frappe.call({\n            method: 'health_sil.services.appointment_api.check_last_encounter',\n            args: { patient },\n            callback: function(r) {\n                if (r.message.has_encounter) {\n                    dialog.set_value('doctor_name', r.message.doctor);\n                    dialog.get_secondary_btn().show();\n                } else {\n                    console.log('This patient has no previous encounters.');\n                }\n            }\n        });\n    }\n\n    if (!is_registered) {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Registration Fee',\n                filters: { territory: patient_territory },\n                fields: ['registration_fee']\n            },\n            callback: function(r) {\n                if (r.message && r.message.length > 0) {\n                    registration_fee = parseFloat(r.message[0].registration_fee || 0);\n                    dialog.registration_fee = registration_fee;\n                    updateTable(dialog, registration_fee, 0, is_registered, frm);\n                }\n            }\n        });\n    } else {\n        dialog.registration_fee = 0;\n        updateTable(dialog, 0, 0, is_registered, frm);\n    }\n\n    dialog.show();\n}\n\nfunction checkConsultationValidity(frm, doctor, dialog) {\n    let today = new Date(frappe.datetime.get_today());\n    \n    // Clear old content\n    dialog.fields_dict.consultation_validity_info.$wrapper.html(\"\");\n\n    // Default both buttons to hidden, reset field visibility\n    let primary_btn = dialog.get_primary_btn();\n    let secondary_btn = dialog.get_secondary_btn();\n\n    if (primary_btn) primary_btn.hide();\n    if (secondary_btn) secondary_btn.hide();\n    dialog.get_field('consultation_charge').toggle(true); // Assume shown unless consultation is valid\n\n    // If no consultation validity records\n    if (!frm.doc.custom_consultation_validity || !frm.doc.custom_consultation_validity.length) {\n        dialog.consultation_valid = false;\n        dialog.fields_dict.consultation_validity_info.$wrapper.html(\n            `<div style=\"margin-top: 10px;\"><span style=\"color:red;\">No active consultation for this doctor</span></div>`\n        );\n        if (primary_btn) primary_btn.show();\n        return;\n    }\n\n    // Search for record for selected doctor\n    let doctorConsultation = frm.doc.custom_consultation_validity.find(row => row.doctor_name === doctor);\n\n    if (!doctorConsultation) {\n        dialog.consultation_valid = false;\n        dialog.fields_dict.consultation_validity_info.$wrapper.html(\n            `<div style=\"margin-top: 10px;\"><span style=\"color:red;\">No active consultation for this doctor</span></div>`\n        );\n        if (primary_btn) primary_btn.show();\n        return;\n    }\n\n    // Parse and compare date\n    let validUpto = new Date(doctorConsultation.consultation_valid_upto_date);\n    let formattedDate = validUpto.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n\n    if (validUpto >= today) {\n        dialog.consultation_valid = true;\n        dialog.fields_dict.consultation_validity_info.$wrapper.html(\n            `<div style=\"margin-top: 10px;\"><span style=\"color:green;\">Consultation Valid Till: ${formattedDate}</span></div>`\n        );\n        if (secondary_btn) secondary_btn.show();\n        dialog.get_field('consultation_charge').toggle(false);\n    } else {\n        dialog.consultation_valid = false;\n        dialog.fields_dict.consultation_validity_info.$wrapper.html(\n            `<div style=\"margin-top: 10px;\"><span style=\"color:red;\">Consultation Expired on: ${formattedDate}</span></div>`\n        );\n        if (primary_btn) primary_btn.show();\n        dialog.get_field('consultation_charge').toggle(true);\n    }\n}\n\n// Function to update consultation validity after payment\nfunction updateConsultationValidity(frm, doctor) {\n    frappe.call({\n        method: 'health_sil.services.consultation_validity.update_consultation_validity',\n        args: {\n            patient: frm.doc.name,\n            doctor: doctor\n        },\n        callback: function(r) {\n            if (r.message && r.message.success) {\n                console.log(\"Consultation validity updated successfully\");\n                // Refresh the form to get updated consultation validity data\n                frm.reload_doc();\n            } else {\n                console.error(\"Failed to update consultation validity:\", r.message ? r.message.error : \"Unknown error\");\n            }\n        }\n    });\n}\n\n// Define updateTable function at the global scope\nfunction updateTable(dialog, registration_fee, consultation_fee, is_registered, frm, doctor = null) {\n    frm.refresh();\n    let showTable = false;\n    let rows = '';\n    \n    // Modern styling for the table and inputs\n    const modernCSS = `\n        <style>\n            /* Remove spinner from number inputs */\n            .no-spinner::-webkit-inner-spin-button, \n            .no-spinner::-webkit-outer-spin-button { \n                -webkit-appearance: none; \n                margin: 0; \n            }\n            .no-spinner {\n                -moz-appearance: textfield;\n            }\n            \n            /* Modern table styling */\n            .modern-fee-table {\n                width: 100%;\n                border-collapse: collapse;\n            }\n            \n            .modern-fee-table th {\n                background-color: #eaeff4;\n                color: black;\n                font-weight: 500;\n                font-size: 14px;\n                padding: 10px 15px;\n                border-bottom: 1px solid #ebeef0;\n                text-align: left;\n            }\n            \n            .modern-fee-table th.amount-header {\n                text-align: right;\n            }\n            \n            .modern-fee-table td {\n                padding: 12px 15px;\n                border-bottom: 1px solid #ebeef0;\n                font-size: 14px;\n                color: #192734;\n            }\n            \n            .modern-fee-table tr:last-child td {\n                border-top: 2px solid #ebeef0;\n                border-bottom: none;\n                font-weight: 600;\n            }\n            \n            .amount-column {\n                text-align: right;\n            }\n            \n            .modern-input {\n                background-color: #f8fafc;\n                border: 1px solid #d1d8dd;\n                border-radius: 4px;\n                padding: 6px 8px;\n                width: 120px;\n                color: #192734;\n                font-size: 14px;\n                transition: border-color 0.2s, box-shadow 0.2s;\n                text-align: right;\n            }\n            \n            .modern-input:focus {\n                outline: none;\n                border-color: #5e64ff;\n                box-shadow: 0 0 0 2px rgba(94, 100, 255, 0.1);\n            }\n            \n            .currency-symbol {\n                color: #6c7680;\n                margin-right: 3px;\n            }\n            \n            .total-row {\n                font-weight: 600;\n                font-size: 15px;\n            }\n            \n            .total-amount-value {\n                font-size: 18px;\n                font-weight: 700;\n            }\n            \n            .table-container {\n                border-radius: 8px;\n                background-color: white;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n                overflow: hidden;\n            }\n        </style>\n    `;\n\n    // Editable Registration Fee Row\n    if (!is_registered) {\n        showTable = true;\n        rows += `\n            <tr>\n                <td>Registration Fee</td>\n                <td class=\"amount-column\">\n                    <span class=\"currency-symbol\">₹</span>\n                    <input type=\"number\" min=\"0\" step=\"0.01\"\n                         class=\"fee-input no-spinner modern-input\" data-type=\"reg\"\n                         value=\"${registration_fee.toFixed(2)}\" />\n                </td>\n            </tr>\n        `;\n    }\n\n    // Check if consultation is valid for the selected doctor\n    let consultationValid = false;\n    if (doctor && frm.doc.custom_consultation_validity) {\n        for (let i = 0; i < frm.doc.custom_consultation_validity.length; i++) {\n            let entry = frm.doc.custom_consultation_validity[i];\n            if (entry.doctor_name === doctor) {\n                let validUpto = new Date(entry.consultation_valid_upto_date);\n                let today = new Date(frappe.datetime.get_today());\n                if (validUpto >= today) {\n                    consultationValid = true;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Editable Consultation Fee Row\n    if (doctor && !consultationValid) {\n        showTable = true;\n        rows += `\n            <tr>\n                <td>Consultation Fee</td>\n                <td class=\"amount-column\">\n                    <span class=\"currency-symbol\">₹</span>\n                    <input type=\"number\" min=\"0\" step=\"0.01\"\n                         class=\"fee-input no-spinner modern-input\" data-type=\"consult\"\n                         value=\"${consultation_fee.toFixed(2)}\" />\n                </td>\n            </tr>\n        `;\n    }\n\n    // Only show total if there are items to charge\n    if (showTable) {\n        let total = (!consultationValid ? consultation_fee : 0) + (!is_registered ? registration_fee : 0);\n        rows += `\n            <tr class=\"total-row\">\n                <td>Total Amount</td>\n                <td class=\"amount-column\">₹ <span id=\"total_amount\" class=\"total-amount-value\">${total.toFixed(2)}</span></td>\n            </tr>\n        `;\n\n        let table_html = `\n            ${modernCSS}\n            <div class=\"table-container\">\n                <table class=\"modern-fee-table\">\n                    <thead>\n                        <tr>\n                            <th>Item</th>\n                            <th class=\"amount-header\">Amount (₹)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${rows}\n                    </tbody>\n                </table>\n            </div>\n        `;\n\n        dialog.fields_dict.items_table.$wrapper.html(table_html);\n\n        // Store the consultation validity state in the dialog\n        dialog.consultation_valid = consultationValid;\n\n        // Attach event listeners after rendering - using jQuery for more reliable event binding\n        setTimeout(() => {\n            // Use jQuery to handle events more reliably\n            dialog.fields_dict.items_table.$wrapper.find('.fee-input').on('input', function() {\n                let regVal = 0;\n                let consultVal = 0;\n                \n                // Get registration fee value if it exists\n                dialog.fields_dict.items_table.$wrapper.find('.fee-input[data-type=\"reg\"]').each(function() {\n                    regVal = parseFloat($(this).val() || 0);\n                });\n                \n                // Get consultation fee value if it exists\n                dialog.fields_dict.items_table.$wrapper.find('.fee-input[data-type=\"consult\"]').each(function() {\n                    consultVal = parseFloat($(this).val() || 0);\n                });\n                \n                const total = regVal + consultVal;\n                \n                // Update the total display\n                dialog.fields_dict.items_table.$wrapper.find('#total_amount').text(total.toFixed(2));\n                \n                // Update dialog stored values for use on submit\n                if ($(this).data('type') === 'reg') {\n                    dialog.registration_fee = regVal;\n                } else if ($(this).data('type') === 'consult') {\n                    dialog.set_value('consultation_charge', consultVal);\n                }\n            });\n        }, 100);\n    } else {\n        dialog.fields_dict.items_table.$wrapper.html('');\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pharmacy Billing",
  "enabled": 1,
  "modified": "2025-04-09 17:09:28.675937",
  "module": "Health Sil",
  "name": "Pharmacy Billing Conditions",
  "script": "frappe.ui.form.on('Pharmacy Billing', {\n    healthcare_practitioner: function(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                }).catch(err => {\n                    console.error(\"Error fetching department:\", err);\n                });\n        }\n    },\n    refresh: function(frm) {\n        frm.fields_dict.medicines.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"  // Show only pharmacy-related items\n                }\n            };\n        };\n        frm.fields_dict.medicines.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"  // Show only pharmacy-related items\n                }\n            };\n        };\n    },\n    \n    validate: function (frm) {\n        let required_main_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        let required_row_fields = [\"item_code\", \"qty\", \"mrp\", \"amount\",\"gst_\"];\n        let missing_fields = [];\n\n        // *Check Main Form Fields**\n        required_main_fields.forEach(field => {\n            if (!frm.doc[field]) {\n                missing_fields.push(__(frappe.meta.get_label(frm.doctype, field, frm.doc.name)));\n            }\n        });\n\n        // *Check Each Row in Medicines Table**\n        if (frm.doc.medicines && frm.doc.medicines.length > 0) {\n            for (let row of frm.doc.medicines) {\n                for (let field of required_row_fields) {\n                    if (!row[field]) {\n                        frappe.msgprint(__(\"Please fill all required fields in the medicines table before saving.\"));\n                        frappe.validated = false;\n                        return;\n                    }\n                }\n            }\n        }\n\n        // *Stop Saving If Any Main Field is Missing**\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \"<br><b>\" + missing_fields.join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n        \n    },\n    \n    before_print: function(frm) {\n        let item_count = frm.doc.medicines.length; // Adjust for your item field\n\n        // Choose print format based on item count\n        let print_format = item_count > 10 ? \"Long Invoice Format\" : \"Pharmacy Inv\";\n\n        // Set the selected print format before printing\n        frm.meta.default_print_format = print_format;\n    },\n    \n});\n\nfrappe.ui.form.on('Pharmaceuticals', {\n    // Recalculate totals whenever the medicines table is modified\n    medicines_add: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        // Get all existing medicines in the child table\n        let medicines = frm.doc.medicines || [];\n\n        // Check for duplicate item_code\n        let is_duplicate = medicines.some((med) => med.item_code === row.item_code && med.item_name !== row.item_name);\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This medicine is already added to the bill. Please update the quantity instead.'));\n            \n            // Remove the duplicate row\n            frappe.model.clear_table(cdt, cdn);\n            frm.refresh_field(\"medicines\");\n            return;\n        }\n\n        calculate_totals(frm);\n    },\n    \n    medicines_remove: function(frm) {\n        calculate_totals(frm);\n    },\n    \n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        let medicines = frm.doc.medicines || [];\n\n        // Check for duplicate item_code (excluding the current row)\n        let is_duplicate = medicines.some(med => med.item_code === row.item_code && med.name !== row.name);\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This medicine is already added. Update the quantity instead.'));\n            \n            // Remove the duplicate row\n            frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n            frappe.model.set_value(cdt, cdn, \"item_name\", \"\");\n            frm.refresh_field(\"medicines\");\n            return;\n        }\n\n        fetch_item_details(frm, cdt, cdn, \"item_code\", row.item_code);\n    },\n    \n    qty: function (frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let tablets_per_strip = row.tablets_per_strip ?? 1;\n        if (tablets_per_strip > 0) {\n            frappe.model.set_value(cdt, cdn, \"strips\", Math.floor(row.qty / tablets_per_strip) || 0);\n            frappe.model.set_value(cdt, cdn, \"nos\", row.qty % tablets_per_strip || 0);\n        } else {\n            frappe.model.set_value(cdt, cdn, \"strips\", 0);\n            frappe.model.set_value(cdt, cdn, \"nos\", row.qty);\n        }\n\n        // **Calculate GST Per Unit**\n        let base_price = row.custom_original_mrp || 0;  // Ensure a valid base price\n        let gst_ = row.gst_ || 0;\n        let tax_per_unit = (base_price * gst_) / 100;\n        let final_price = base_price + tax_per_unit;  // Rate after GST\n        \n        // **Calculate GST Breakdown**\n        let cgst_amount = ((tax_per_unit / 2) * row.qty) || 0;\n        let sgst_amount = ((tax_per_unit / 2) * row.qty) || 0;\n        let total_tax = (tax_per_unit * row.qty) || 0;\n\n        // **Calculate Final Values**\n        let amount_before_tax = base_price * row.qty;\n        let amount_after_tax = final_price * row.qty;\n\n        // **Apply Discount**\n        let discount_rate = row.discount_ || 0;\n        let discount_amount = (amount_before_tax * discount_rate) / 100;\n        let total_after_discount = amount_before_tax - discount_amount;\n\n        // **Recalculate GST on Discounted Amount**\n        let total_tax_after_discount = (total_after_discount * gst_) / 100;\n        let final_amount = total_after_discount + total_tax_after_discount;\n        let new_cgst = total_tax_after_discount / 2;\n        let new_sgst = total_tax_after_discount / 2;\n\n        // **Update Values in Form**\n        frappe.model.set_value(cdt, cdn, \"rate\", final_price);\n        frappe.model.set_value(cdt, cdn, \"amount_before_tax\", amount_before_tax);\n        frappe.model.set_value(cdt, cdn, \"cgst_amount\", new_cgst);\n        frappe.model.set_value(cdt, cdn, \"sgst_amount\", new_sgst);\n        frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax_after_discount);\n        frappe.model.set_value(cdt, cdn, \"discounted_amount\", discount_amount);\n        frappe.model.set_value(cdt, cdn, \"amount\", final_amount);\n\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    gst_: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n    \n        if (!row.custom_original_mrp || row.gst_ === undefined) {\n            console.warn(\"Missing Original MRP or GST for:\", row.item_code);\n            return;\n        }\n    \n        try {\n            // **Always Use Original MRP for Calculation**\n            let base_price = row.custom_original_mrp;  \n            let tax_per_unit = (base_price * row.gst_) / 100;\n            let new_mrp = base_price + tax_per_unit;  // Increase GST from original MRP\n    \n            /// **Calculate GST Per Unit**\n            let cgst_amount = (tax_per_unit / 2) * row.qty;\n            let sgst_amount = (tax_per_unit / 2) * row.qty;\n            let total_tax = tax_per_unit * row.qty;\n            let final_total = new_mrp * row.qty;  // Total amount including GST\n    \n            /// **Update Fields**\n            frappe.model.set_value(cdt, cdn, \"mrp\", new_mrp);\n            frappe.model.set_value(cdt, cdn, \"cgst_amount\", cgst_amount);\n            frappe.model.set_value(cdt, cdn, \"sgst_amount\", sgst_amount);\n            frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax);\n            frappe.model.set_value(cdt, cdn, \"amount\", final_total);\n    \n        } catch (error) {\n            console.error(\"Error updating GST values:\", error);\n        }\n    \n        // **Recalculate Totals for Entire Bill**\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    discount_: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let base_amount = row.amount_before_tax || 0;  // Base amount before GST\n        let discount_amount = (base_amount * (row.discount_ || 0)) / 100;\n        let total_amount = base_amount - discount_amount;\n\n        /// **Recalculate GST After Discount**\n        let gst_rate = row.gst_ || 0;\n        let total_tax = (total_amount * gst_rate) / 100;\n        \n        let cgst_amount = total_tax / 2;\n        let sgst_amount = total_tax / 2;\n\n        /// **Final Amount Calculation**\n        let final_total = total_amount + total_tax;\n\n        /// **Update Values in Form**\n        frappe.model.set_value(cdt, cdn, \"discounted_amount\", discount_amount);\n        frappe.model.set_value(cdt, cdn, \"total_amount\", total_amount);\n        frappe.model.set_value(cdt, cdn, \"cgst_amount\", cgst_amount);\n        frappe.model.set_value(cdt, cdn, \"sgst_amount\", sgst_amount);\n        frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax);\n        frappe.model.set_value(cdt, cdn, \"amount\", final_total);\n\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    medicines_add: function (frm) {\n        let medicines = frm.doc.medicines;\n        \n        // Ensure there's a previous row before validation\n        if (medicines.length > 1) {\n            let last_row_index = medicines.length - 2;\n            let last_row = medicines[last_row_index]; // Get the previous row\n            \n            if (!last_row) {\n                console.warn(\"Last row not found. Skipping validation.\");\n                return;\n            }\n\n            let required_fields = [\"item_code\", \"qty\", \"mrp\", \"amount\"];\n            for (let field of required_fields) {\n                if (!last_row[field] || (field === \"qty\" && last_row[field] <= 0)) {\n                    frappe.msgprint(__(\"Please complete the previous row before adding a new one.\"));\n                    \n                    // Remove the added row after a slight delay\n                    setTimeout(() => {\n                        if (frm.doc.medicines.length > last_row_index + 1) {\n                            frm.doc.medicines.splice(last_row_index + 1, 1);  \n                            frm.refresh_field(\"medicines\");\n                        }\n                    }, 100);\n\n                    return;\n                }\n            }\n        }\n    },\n});\n\nfunction fetch_item_details(frm, cdt, cdn, field, value) {\n    if (value) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: \"Item\",\n                name: value\n            },\n            callback: function(r) {\n                if (r.message) {\n                    let row = locals[cdt][cdn];\n\n                    // Set Item Details\n                    frappe.model.set_value(cdt, cdn, \"item_code\", value);\n                    frappe.model.set_value(cdt, cdn, \"item_name\", r.message.item_name || \"\");\n                    frappe.model.set_value(cdt, cdn, \"hsn\", r.message.gst_hsn_code || \"\");\n                    frappe.model.set_value(cdt, cdn, \"tablets_per_strip\", r.message.weight_per_unit ?? 1);\n                    frappe.model.set_value(cdt, cdn, \"mrp\", r.message.valuation_rate || 0);\n                    \n                    // **Store Original MRP (Only if not set)**\n                    if (!row.custom_original_mrp) {\n                        frappe.model.set_value(cdt, cdn, \"custom_original_mrp\", r.message.valuation_rate);\n                    }\n                    \n                    \n                    frappe.call({\n                        method: 'frappe.client.get_value',\n                        args: {\n                            doctype: \"Item\",\n                            fieldname: \"taxes\",  // Fetch the entire child table field\n                            filters: { name: value }\n                        },\n                        callback: function(res) {\n                            if (res.message && res.message.taxes) {\n                                let taxes_data = res.message.taxes; // Get the \"taxes\" JSON\n                    \n                                if (taxes_data.length > 0) {\n                                    let tax_template = taxes_data[0].item_tax_template;\n                    \n                                    if (tax_template) {\n                                        frappe.call({\n                                            method: 'frappe.client.get_value',\n                                            args: {\n                                                doctype: \"Item Tax Template\",\n                                                fieldname: \"gst_rate\",\n                                                filters: { name: tax_template }\n                                            },\n                                            callback: function(res2) {\n                                                if (res2.message && res2.message.gst_rate !== undefined) {\n                                                    frappe.model.set_value(cdt, cdn, \"gst_\", res2.message.gst_rate);\n                                                } else {\n                                                    frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                                                }\n                                            }\n                                        });\n                                    } else {\n                                        frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                                    }\n                                } else {\n                                    frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                                }\n                            }\n                        }\n                    });\n\n                    // Fetch batch details\n                    fetch_batch_details(frm, cdt, cdn, value);\n                } else {\n                    frappe.msgprint(__('Item details not found!'));\n                }\n            }\n        });\n    }\n}\n\n// Function to Fetch Batch Details\nfunction fetch_batch_details(frm, cdt, cdn, item_code) {\n    console.log(\"fetch_batch_details:\",item_code)\n    frappe.db.get_value(\"Batch\", { \"item\": item_code }, [\"batch_id\", \"expiry_date\"])\n        .then(r => {\n            console.log(r.message)\n            if (r.message) {\n                frappe.model.set_value(cdt, cdn, \"batch\", r.message.batch_id || \"\");\n                frappe.model.set_value(cdt, cdn, \"expiry_date\", r.message.expiry_date || \"\");\n               \n                // frm.refresh_field(\"medicines\");\n            } else {\n                frappe.msgprint(__('Batch details not found!'));\n            }\n        }).catch(err => {\n            console.error('Error fetching batch:', err);\n        });\n}\n\nfunction calculate_totals(frm) {\n    let total_qty = 0;\n    let total_before_tax = 0;\n    let total_tax = 0;\n    let total_cgst = 0;\n    let total_sgst = 0;\n    let grand_total = 0;\n    let total_items = 0;\n    let saved_amount = 0;\n\n    if (frm.doc.medicines && frm.doc.medicines.length > 0) {\n        total_items = frm.doc.medicines.length; // Count total rows in medicines table\n        \n        frm.doc.medicines.forEach(row => {\n            total_qty += row.qty || 0;\n            total_before_tax += row.amount_before_tax || 0;\n            total_cgst += row.cgst_amount || 0;\n            total_sgst += row.sgst_amount || 0;\n            total_tax += row.tax_amount || 0;\n            grand_total += row.amount || 0;\n            saved_amount += row.discounted_amount || 0;\n            \n        });\n    }\n\n    frm.set_value(\"total_quantity\", total_qty);\n    frm.set_value(\"custom_sub_total_before_tax\", total_before_tax);\n    frm.set_value(\"custom_total_cgst\", total_cgst);\n    frm.set_value(\"custom_total_sgst\", total_sgst);\n    frm.set_value(\"custom_total_tax_amount\", total_tax);\n    frm.set_value(\"total_amount\", grand_total);\n    frm.set_value(\"total_items\", total_items); // Set total number of medicines in bill\n    frm.set_value(\"saved_amount\", saved_amount);\n    \n    let rounded_total = Math.round(frm.doc.total_amount || 0);\n        frm.set_value(\"rounded_total_amount\", rounded_total);\n\n        // Use the whitelisted function\n        frappe.call({\n            method: \"health_sil.services.money_in_words_api.money_in_words_api\",  // Change `healthcare_management` to your app name\n            args: { amount: rounded_total },\n            callback: function(r) {\n                if (r.message) {\n                    frm.set_value(\"amount_in_words\", r.message);\n                }\n            }\n        });\n\n    frm.refresh_fields([\"total_quantity\", \"total_amount\", \"custom_total_tax_amount\", \"custom_total_cgst\", \"custom_total_sgst\", \"custom_sub_total_before_tax\",\"total_items\",\"saved_amount\",\"rounded_total_amount\"]);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure Bill",
  "enabled": 1,
  "modified": "2025-04-16 08:59:26.340250",
  "module": "Health Sil",
  "name": "Cinical procedure Billing Conditions",
  "script": "frappe.ui.form.on('Clinical Procedure Bill', {\n    healthcare_practitioner(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                }).catch(err => console.error(\"Error fetching department:\", err));\n        }\n    },\n\n    refresh(frm) {\n        // Restrict item selection to \"Medical Procedures\"\n        [\"item_code\", \"item_name\"].forEach(field => {\n            frm.fields_dict.nursing_items.grid.get_field(field).get_query = function() {\n                return { filters: { \"item_group\": \"Medical Procedures\" } };\n            };\n        });\n    },\n\n    validate(frm) {\n        const required_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        const missing_fields = required_fields.filter(field => !frm.doc[field]);\n\n        if (frm.doc.nursing_items?.length > 0) {\n            const incomplete_row = frm.doc.nursing_items.find(row =>\n                !row.item_code || !row.rate || !row.amount_before_discount\n            );\n            if (incomplete_row) {\n                frappe.msgprint(__(\"Please fill all required fields in the Nursing Items table before saving.\"));\n                frappe.validated = false;\n                return;\n            }\n        }\n\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \"<br><b>\" +\n                    missing_fields.map(f => __(frappe.meta.get_label(frm.doctype, f, frm.doc.name))).join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n    },\n\n    custom_discount_mode(frm) {\n        calculate_totals(frm);\n    },\n    custom_amount_of_discount(frm) {\n        if (frm.doc.custom_discount_mode === \"Cash\") {\n            calculate_totals(frm);\n        }\n    },\n    custom_percentage_of_discount(frm) {\n        if (frm.doc.custom_discount_mode === \"Percentage\") {\n            calculate_totals(frm);\n        }\n    }\n});\n\nfrappe.ui.form.on('Nursing Items', {\n    nursing_items_add: frm => calculate_totals(frm),\n    nursing_items_remove: frm => calculate_totals(frm),\n\n    item_code(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        if (!row.item_code) return;\n\n        frappe.model.set_value(cdt, cdn, \"qty\", 1);\n\n        frappe.db.get_value(\"Item\", { item_code: row.item_code }, [\"item_name\", \"valuation_rate\"])\n            .then(r => {\n                if (!r.message) {\n                    frappe.msgprint(__('Item not found!'));\n                    return;\n                }\n\n                const { item_name, valuation_rate } = r.message;\n                const rate = valuation_rate || 0;\n\n                frappe.model.set_value(cdt, cdn, {\n                    item_name,\n                    rate,\n                    qty: 1,\n                    amount_before_discount: rate,\n                    amount: rate // temporarily same, final discount applied at parent level\n                });\n\n                frm.refresh_field(\"nursing_items\");\n                calculate_totals(frm);\n            });\n    }\n});\n\n\nfunction calculate_totals(frm) {\n    let total_qty = 0, total_before_discount = 0, total_items = 0;\n\n    (frm.doc.nursing_items || []).forEach(row => {\n        total_qty += row.qty || 0;\n        total_before_discount += row.amount_before_discount || 0;\n    });\n\n    total_items = frm.doc.nursing_items?.length || 0;\n\n    // Parent-level discount\n    let discount_mode = frm.doc.custom_discount_mode;\n    let discount_value = 0;\n\n    if (discount_mode === \"Cash\" && frm.doc.custom_amount_of_discount) {\n        discount_value = frm.doc.custom_amount_of_discount;\n    } else if (discount_mode === \"Percentage\" && frm.doc.custom_percentage_of_discount) {\n        discount_value = (total_before_discount * frm.doc.custom_percentage_of_discount) / 100;\n    }\n\n    let final_total = total_before_discount - discount_value;\n    let rounded_total = Math.round(final_total);\n\n    frm.set_value({\n        total_quantity: total_qty,\n        total_amount: final_total,\n        total_items,\n        saved_amount: discount_value,\n        rounded_total_amount: rounded_total\n    });\n\n    frappe.call({\n        method: \"health_sil.services.money_in_words_api.money_in_words_api\",\n        args: { amount: rounded_total },\n        callback: r => {\n            if (r.message) {\n                frm.set_value(\"amount_in_words\", r.message);\n            }\n        }\n    });\n\n    frm.refresh_fields([\n        \"total_quantity\", \"total_amount\", \"total_items\",\n        \"saved_amount\", \"rounded_total_amount\"\n    ]);\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Laboratory Bill",
  "enabled": 1,
  "modified": "2025-04-16 10:34:27.654091",
  "module": "Health Sil",
  "name": "Laboratory Billing Conditions",
  "script": "// Laboratory Bill - Parent Doctype\nfrappe.ui.form.on('Laboratory Bill', {\n    patient_name: function (frm) {\n        if (!frm.doc.patient_name) return;\n\n        frm.doc.lab_items.forEach(row => {\n            if (!row.item_code) return;\n\n            frappe.call({\n                method: \"health_sil.api.price_list_api.get_country_specific_price\",\n                args: {\n                    item_code: row.item_code,\n                    patient_id: frm.doc.patient_name\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frappe.model.set_value(row.doctype, row.name, \"rate\", r.message);\n                        if (row.qty) {\n                            frappe.model.set_value(row.doctype, row.name, \"amount\", row.qty * r.message);\n                        }\n                    }\n                }\n            });\n        });\n    },\n    \n    healthcare_practitioner(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                }).catch(err => {\n                    console.error(\"Error fetching department:\", err);\n                });\n        }\n    },\n\n    refresh(frm) {\n        frm.fields_dict.lab_items.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return { filters: { \"item_group\": \"Laboratory\" } };\n        };\n        frm.fields_dict.lab_items.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return { filters: { \"item_group\": \"Laboratory\" } };\n        };\n    },\n\n    validate(frm) {\n        const required_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        const missing_fields = required_fields.filter(field => !frm.doc[field]);\n\n        if (frm.doc.lab_items?.length > 0) {\n            const incomplete_row = frm.doc.lab_items.find(row =>\n                !row.item_code || !row.rate || !row.amount_before_discount\n            );\n            if (incomplete_row) {\n                frappe.msgprint(__(\"Please fill all required fields in the Lab Items table before saving.\"));\n                frappe.validated = false;\n                return;\n            }\n        }\n\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \"<br><b>\" +\n                    missing_fields.map(f => __(frappe.meta.get_label(frm.doctype, f, frm.doc.name))).join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n    },\n\n    custom_discount_mode(frm) {\n        calculate_totals(frm);\n    },\n    custom_amount_of_discount(frm) {\n        if (frm.doc.custom_discount_mode === \"Cash\") {\n            calculate_totals(frm);\n        }\n    },\n    custom_percentage_of_discount(frm) {\n        if (frm.doc.custom_discount_mode === \"Percentage\") {\n            calculate_totals(frm);\n        }\n    }\n});\n\n\n// Lab Items - Child Table\nfrappe.ui.form.on('Lab Items', {\n    lab_items_add: frm => calculate_totals(frm),\n    lab_items_remove: frm => calculate_totals(frm),\n\n    item_code(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n\n        // Prevent duplicate item codes\n        const is_duplicate = (frm.doc.lab_items || []).some(item =>\n            item.item_code === row.item_code && item.name !== row.name\n        );\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This item is already added.'));\n            frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n            frappe.model.set_value(cdt, cdn, \"item_name\", \"\");\n            return;\n        }\n\n        if (!row.item_code) return;\n\n        frappe.db.get_value(\"Item\", { item_code: row.item_code }, [\"item_name\", \"valuation_rate\"])\n            .then(r => {\n                if (!r.message) {\n                    frappe.msgprint(__('Item details not found!'));\n                    return;\n                }\n\n                const rate = r.message.valuation_rate || 0;\n\n                frappe.model.set_value(cdt, cdn, \"item_name\", r.message.item_name || \"\");\n                frappe.model.set_value(cdt, cdn, \"rate\", rate);\n                frappe.model.set_value(cdt, cdn, \"qty\", 1);\n                frappe.model.set_value(cdt, cdn, \"amount_before_discount\", rate);\n                frappe.model.set_value(cdt, cdn, \"amount\", rate); // This fills the \"amount\" field in UI\n\n                frm.refresh_field(\"lab_items\");\n                calculate_totals(frm);\n            }).catch(err => {\n                console.error('Error fetching item:', err);\n            });\n    }\n});\n\n\n// Utility Functions\nfunction calculate_totals(frm) {\n    let total_qty = 0, total_before_discount = 0, total_items = 0;\n\n    (frm.doc.lab_items || []).forEach(row => {\n        total_qty += row.qty || 0;\n        total_before_discount += row.amount_before_discount || 0;\n    });\n\n    total_items = frm.doc.lab_items?.length || 0;\n\n    let discount_mode = frm.doc.custom_discount_mode;\n    let discount_value = 0;\n\n    if (discount_mode === \"Cash\" && frm.doc.custom_amount_of_discount) {\n        discount_value = frm.doc.custom_amount_of_discount;\n    } else if (discount_mode === \"Percentage\" && frm.doc.custom_percentage_of_discount) {\n        discount_value = (total_before_discount * frm.doc.custom_percentage_of_discount) / 100;\n    }\n\n    let final_total = total_before_discount - discount_value;\n    let rounded_total = Math.round(final_total);\n\n    frm.set_value(\"total_quantity\", total_qty);\n    frm.set_value(\"total_amount\", final_total);\n    frm.set_value(\"total_items\", total_items);\n    frm.set_value(\"saved_amount\", discount_value);\n    frm.set_value(\"custom_rounded_total_amount\", rounded_total);\n\n    // Amount in Words\n    frappe.call({\n        method: \"health_sil.services.money_in_words_api.money_in_words_api\",\n        args: { amount: rounded_total },\n        callback(r) {\n            if (r.message) {\n                frm.set_value(\"custom_amount_in_words\", r.message);\n            }\n        }\n    });\n\n    frm.refresh_fields([\n        \"total_quantity\", \"total_amount\", \"total_items\",\n        \"saved_amount\", \"custom_rounded_total_amount\"\n    ]);\n}\n\n",
  "view": "Form"
 }
]